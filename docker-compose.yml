# ========================================
# LYDIAN-IQ INFRASTRUCTURE
# Docker Compose Configuration
# ========================================
# Purpose: Local development infrastructure
# Services: Postgres, Redis, Vault, Kafka, Temporal, Prometheus, Grafana
# Version: 1.0

version: '3.9'

services:
  # ========== Database (PostgreSQL) ==========
  postgres:
    image: postgres:16-alpine
    container_name: lydian-postgres
    environment:
      POSTGRES_DB: lydian_iq
      POSTGRES_USER: lydian
      POSTGRES_PASSWORD: lydian_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lydian"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Cache (Redis) ==========
  redis:
    image: redis:7-alpine
    container_name: lydian-redis
    command: redis-server --appendonly yes --requirepass lydian_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Message Broker (Kafka/Redpanda) ==========
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.3
    container_name: lydian-kafka
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    ports:
      - "19092:19092" # Kafka API
      - "18081:18081" # Schema Registry
      - "18082:18082" # Pandaproxy (REST API)
      - "9644:9644"   # Admin API
    volumes:
      - kafka_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - lydian-network

  # ========== Secret Management (HashiCorp Vault) ==========
  vault:
    image: hashicorp/vault:1.15
    container_name: lydian-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: lydian_root_token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - lydian-network

  # ========== Workflow Orchestration (Temporal) ==========
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: lydian-temporal
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=lydian
      - POSTGRES_PWD=lydian_dev_password
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233" # gRPC
      - "8233:8233" # Web UI
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Metrics (Prometheus) ==========
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: lydian-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Visualization (Grafana) ==========
  grafana:
    image: grafana/grafana:10.2.2
    container_name: lydian-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=lydian_grafana_password
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Jaeger (Distributed Tracing) ==========
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: lydian-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"   # accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"   # accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"   # accept jaeger.thrift over binary thrift protocol
      - "5778:5778"       # serve configs
      - "16686:16686"     # serve frontend (Jaeger UI)
      - "14250:14250"     # accept model.proto
      - "14268:14268"     # accept jaeger.thrift directly from clients
      - "14269:14269"     # Health check at / and metrics at /metrics
      - "4317:4317"       # OTLP gRPC receiver
      - "4318:4318"       # OTLP HTTP receiver
      - "9411:9411"       # Zipkin compatible endpoint
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14269/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== MinIO (S3-compatible storage for testing) ==========
  minio:
    image: minio/minio:latest
    container_name: lydian-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=lydian
      - MINIO_ROOT_PASSWORD=lydian_minio_password
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

# ========== Volumes ==========
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# ========== Networks ==========
networks:
  lydian-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

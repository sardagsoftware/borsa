// LCI Database Schema - White-hat Security & KVKK/GDPR Compliant
// Generated: 2025-10-13

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), pg_trgm, unaccent, pgcrypto]
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum KycLevel {
  NONE
  EMAIL_VERIFIED
  ID_VERIFIED
}

enum Actor {
  USER
  BRAND_AGENT
  MODERATOR
  ADMIN
  SYSTEM
}

enum ComplaintState {
  DRAFT
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
  REJECTED
}

enum LegalRequestType {
  EXPORT
  ERASE
  RESTRICT
}

enum LegalRequestState {
  RECEIVED
  IN_PROGRESS
  FULFILLED
  REJECTED
}

enum ModerationPolicy {
  TOXICITY
  DEFAMATION
  PII_LEAK
  SPAM
  DUPLICATE
  OTHER
}

enum FlagState {
  OPEN
  UNDER_REVIEW
  CONFIRMED
  DISMISSED
}

enum VerificationLevel {
  UNVERIFIED
  DOMAIN_VERIFIED
  DOCUMENTED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// CORE MODELS
// ============================================================================

model User {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique @db.VarChar(255)
  emailHash    String     @db.VarChar(128) // SHA-256 for search/dedup
  passwordHash String     @db.VarChar(128) // bcrypt hash
  phoneHash    String?    @db.VarChar(128) // SHA-256, nullable
  role         Actor      @default(USER) // RBAC role
  kycLevel     KycLevel   @default(NONE)
  status       UserStatus @default(ACTIVE)
  locale       String?    @db.VarChar(10) // 'tr', 'en', etc.
  mfaEnabled   Boolean    @default(false)
  createdAt    DateTime   @default(now()) @db.Timestamptz
  updatedAt    DateTime   @updatedAt @db.Timestamptz

  // Relations
  complaints         Complaint[]
  ratings            Rating[]
  legalRequests      LegalRequest[]
  auditEvents        AuditEvent[]
  dataErasureRequests DataErasureRequest[]

  @@index([emailHash], name: "idx_user_email_hash")
  @@index([phoneHash], name: "idx_user_phone_hash")
  @@index([status], name: "idx_user_status")
  @@index([role], name: "idx_user_role")
  @@map("users")
}

model Brand {
  id                String            @id @default(uuid()) @db.Uuid
  name              String            @db.VarChar(255)
  slug              String            @unique @db.VarChar(255)
  domain            String?           @db.VarChar(255)
  categories        String[]          @db.Text
  status            String            @default("ACTIVE") @db.VarChar(50)
  verificationLevel VerificationLevel @default(UNVERIFIED)
  slaHours          Int               @default(72) // Target first response time
  createdAt         DateTime          @default(now()) @db.Timestamptz
  updatedAt         DateTime          @updatedAt @db.Timestamptz

  // Reputation metrics (materialized by background jobs)
  solutionRate      Float? // 0.0 to 1.0
  avgFirstResponseH Float? // Average hours to first response
  avgResolutionH    Float? // Average hours to resolution

  // Relations
  agents     BrandAgent[]
  products   Product[]
  complaints Complaint[]
  responses  BrandResponse[]
  seoPages   SeoPage[]
  webhooks   Webhook[]

  @@index([slug], name: "idx_brand_slug")
  @@index([domain], name: "idx_brand_domain")
  @@index([status], name: "idx_brand_status")
  @@map("brands")
}

model Product {
  id         String  @id @default(uuid()) @db.Uuid
  brandId    String  @db.Uuid
  name       String  @db.VarChar(255)
  gtin       String? @unique @db.VarChar(50) // Global Trade Item Number
  category   String? @db.VarChar(100)
  attributes Json?   @db.JsonB

  // Relations
  brand      Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  complaints Complaint[]

  @@index([brandId], name: "idx_product_brand")
  @@index([name], name: "idx_product_name")
  @@index([gtin], name: "idx_product_gtin")
  @@map("products")
}

model Complaint {
  id             String         @id @default(uuid()) @db.Uuid
  userId         String         @db.Uuid
  brandId        String         @db.Uuid
  productId      String?        @db.Uuid
  title          String         @db.VarChar(500)
  body           String         @db.Text
  state          ComplaintState @default(DRAFT)
  severity       Severity       @default(MEDIUM)
  evidencePackId String?        @db.Uuid
  searchText     String         @db.Text // Source for FTS tsvector
  createdAt      DateTime       @default(now()) @db.Timestamptz
  updatedAt      DateTime       @updatedAt @db.Timestamptz
  publishedAt    DateTime?      @db.Timestamptz

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Restrict)
  brand         Brand             @relation(fields: [brandId], references: [id], onDelete: Restrict)
  product       Product?          @relation(fields: [productId], references: [id], onDelete: SetNull)
  evidencePack  EvidencePack?     @relation(fields: [evidencePackId], references: [id], onDelete: SetNull)
  events        ComplaintEvent[]
  flags         ModerationFlag[]
  rating        Rating?
  legalRequests LegalRequest[]
  responses     BrandResponse[]
  evidence      Evidence[]

  @@index([brandId, state], name: "idx_complaint_brand_state")
  @@index([userId], name: "idx_complaint_user")
  @@index([productId], name: "idx_complaint_product")
  @@index([createdAt], name: "idx_complaint_created")
  @@index([state], name: "idx_complaint_state")
  @@map("complaints")
}

model ComplaintEvent {
  id          String   @id @default(uuid()) @db.Uuid
  complaintId String   @db.Uuid
  actor       Actor
  type        String   @db.VarChar(100) // "STATE_CHANGE", "BRAND_REPLY", etc.
  payload     Json     @db.JsonB
  createdAt   DateTime @default(now()) @db.Timestamptz

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@index([complaintId, createdAt], name: "idx_event_complaint_time")
  @@index([actor], name: "idx_event_actor")
  @@index([type], name: "idx_event_type")
  @@map("complaint_events")
}

model ModerationFlag {
  id         String           @id @default(uuid()) @db.Uuid
  sourceId   String           @db.Uuid
  sourceType String           @db.VarChar(50) // "complaint", "evidence", "comment"
  policy     ModerationPolicy
  score      Float            @db.DoublePrecision // 0.0 to 1.0
  state      FlagState        @default(OPEN)
  notes      String?          @db.Text
  createdAt  DateTime         @default(now()) @db.Timestamptz
  updatedAt  DateTime         @updatedAt @db.Timestamptz

  // Relations (polymorphic via sourceId + sourceType)
  complaint Complaint? @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, sourceType], name: "idx_flag_source")
  @@index([policy, state], name: "idx_flag_policy_state")
  @@index([state], name: "idx_flag_state")
  @@map("moderation_flags")
}

model EvidencePack {
  id           String    @id @default(uuid()) @db.Uuid
  files        Json      @db.JsonB // [{key, size, mime, sha256}]
  merkleRoot   String    @db.VarChar(128)
  jwsSignature String?   @db.Text // JWS-signed evidence manifest
  notarizedAt  DateTime? @db.Timestamptz
  createdAt    DateTime  @default(now()) @db.Timestamptz

  // Relations
  complaints Complaint[]

  @@index([merkleRoot], name: "idx_evidence_merkle")
  @@map("evidence_packs")
}

model BrandAgent {
  id         String    @id @default(uuid()) @db.Uuid
  brandId    String    @db.Uuid
  email      String    @db.VarChar(255)
  role       String    @db.VarChar(50) // "owner", "agent", "viewer"
  mfaEnabled Boolean   @default(true)
  invitedAt  DateTime  @default(now()) @db.Timestamptz
  acceptedAt DateTime? @db.Timestamptz

  // Relations
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, email], name: "uq_brand_agent_email")
  @@index([brandId], name: "idx_agent_brand")
  @@index([email], name: "idx_agent_email")
  @@map("brand_agents")
}

model Rating {
  id          String   @id @default(uuid()) @db.Uuid
  complaintId String   @unique @db.Uuid
  userId      String   @db.Uuid
  score       Int      @db.SmallInt // 1 to 5
  nps         Int?     @db.SmallInt // -100 to 100
  comment     String?  @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([score], name: "idx_rating_score")
  @@index([userId], name: "idx_rating_user")
  @@map("ratings")
}

model LegalRequest {
  id          String             @id @default(uuid()) @db.Uuid
  userId      String?            @db.Uuid
  complaintId String?            @db.Uuid
  type        LegalRequestType
  state       LegalRequestState  @default(RECEIVED)
  deadlineAt  DateTime?          @db.Timestamptz
  payload     Json?              @db.JsonB
  createdAt   DateTime           @default(now()) @db.Timestamptz
  updatedAt   DateTime           @updatedAt @db.Timestamptz

  // Relations
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  complaint Complaint? @relation(fields: [complaintId], references: [id], onDelete: SetNull)

  @@index([type, state], name: "idx_legal_type_state")
  @@index([deadlineAt], name: "idx_legal_deadline")
  @@index([userId], name: "idx_legal_user")
  @@map("legal_requests")
}

model SeoPage {
  id          String    @id @default(uuid()) @db.Uuid
  brandId     String?   @db.Uuid
  slug        String    @unique @db.VarChar(255)
  type        String    @db.VarChar(50) // "brand", "category", "product", "guide"
  schema      Json?     @db.JsonB // Schema.org JSON-LD
  lastBuiltAt DateTime? @db.Timestamptz

  // Relations
  brand Brand? @relation(fields: [brandId], references: [id], onDelete: SetNull)

  @@index([type], name: "idx_seo_type")
  @@index([brandId], name: "idx_seo_brand")
  @@map("seo_pages")
}

model AuditEvent {
  id        String   @id @default(uuid()) @db.Uuid
  actorId   String?  @db.Uuid
  actorRole Actor?
  action    String   @db.VarChar(100) // "CREATE_COMPLAINT", "BRAND_REPLY", etc.
  entity    String   @db.VarChar(100) // "Complaint", "Brand", etc.
  entityId  String?  @db.Uuid
  ip        String?  @db.Inet
  meta      Json?    @db.JsonB
  createdAt DateTime @default(now()) @db.Timestamptz

  // Relations
  user User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([entity, entityId], name: "idx_audit_entity")
  @@index([actorRole], name: "idx_audit_role")
  @@index([createdAt], name: "idx_audit_created")
  @@index([action], name: "idx_audit_action")
  @@map("audit_events")
}

// Brand Response Model - For brand replies to complaints
model BrandResponse {
  id          String   @id @default(uuid()) @db.Uuid
  complaintId String   @db.Uuid
  brandId     String   @db.Uuid
  message     String   @db.Text
  respondedBy String   @db.Uuid // User ID of brand agent
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  brand     Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@index([complaintId], name: "idx_response_complaint")
  @@index([brandId], name: "idx_response_brand")
  @@index([createdAt], name: "idx_response_created")
  @@map("brand_responses")
}

// Evidence Model - Individual evidence files
model Evidence {
  id          String   @id @default(uuid()) @db.Uuid
  complaintId String   @db.Uuid
  filename    String   @db.VarChar(255)
  size        Int      @db.Integer
  mimeType    String   @db.VarChar(100)
  key         String   @db.VarChar(512) // Storage key/path
  sha256      String   @db.VarChar(64)
  createdAt   DateTime @default(now()) @db.Timestamptz

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@index([complaintId], name: "idx_evidence_complaint")
  @@index([sha256], name: "idx_evidence_hash")
  @@map("evidence")
}

// Data Erasure Request Model - KVKK/GDPR compliance
model DataErasureRequest {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  reason      String?   @db.Text
  status      String    @db.VarChar(50) // PENDING, COMPLETED, CANCELLED
  createdAt   DateTime  @default(now()) @db.Timestamptz
  processedAt DateTime? @db.Timestamptz
  processedBy String?   @db.VarChar(255)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_erasure_user")
  @@index([status], name: "idx_erasure_status")
  @@index([createdAt], name: "idx_erasure_created")
  @@map("data_erasure_requests")
}

// Webhook Model - Brand integrations
model Webhook {
  id          String    @id @default(uuid()) @db.Uuid
  brandId     String    @db.Uuid
  url         String    @db.VarChar(512)
  secret      String    @db.VarChar(128) // HMAC signing secret
  events      String[]  @db.Text // ["complaint.created", "complaint.resolved", etc.]
  isActive    Boolean   @default(true)
  lastSuccess DateTime? @db.Timestamptz
  lastFailure DateTime? @db.Timestamptz
  failCount   Int       @default(0) @db.Integer
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  // Relations
  brand        Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  deliveries   WebhookDelivery[]

  @@index([brandId], name: "idx_webhook_brand")
  @@index([isActive], name: "idx_webhook_active")
  @@map("webhooks")
}

// Webhook Delivery Log - Audit trail
model WebhookDelivery {
  id            String   @id @default(uuid()) @db.Uuid
  webhookId     String   @db.Uuid
  event         String   @db.VarChar(100) // "complaint.created"
  payload       Json     @db.JsonB
  response      String?  @db.Text
  statusCode    Int?     @db.SmallInt
  success       Boolean
  attemptNumber Int      @default(1) @db.SmallInt
  createdAt     DateTime @default(now()) @db.Timestamptz

  // Relations
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, createdAt], name: "idx_delivery_webhook_time")
  @@index([success], name: "idx_delivery_success")
  @@map("webhook_deliveries")
}

// Email Notification Queue
model EmailNotification {
  id         String    @id @default(uuid()) @db.Uuid
  to         String    @db.VarChar(255)
  subject    String    @db.VarChar(500)
  template   String    @db.VarChar(100) // "sla_warning", "new_complaint", etc.
  variables  Json      @db.JsonB // Template variables
  status     String    @db.VarChar(50) // PENDING, SENT, FAILED
  sentAt     DateTime? @db.Timestamptz
  failReason String?   @db.Text
  createdAt  DateTime  @default(now()) @db.Timestamptz

  @@index([status], name: "idx_email_status")
  @@index([template], name: "idx_email_template")
  @@index([createdAt], name: "idx_email_created")
  @@map("email_notifications")
}

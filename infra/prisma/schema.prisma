generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ============================================================================
// CORE MODELS (v2)
// ============================================================================

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  passwordHash  String
  role          UserRole @default(USER)
  tenantId      String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  conversations Conversation[]
  apiKeys       ApiKey[]
  tenant        Tenant?         @relation(fields: [tenantId], references: [id])
  sessions      Session[]
  preferences   UserPreference?
  wallets       Wallet[]

  @@index([email])
  @@index([tenantId])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Tenant {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  tier            TenantTier @default(FREE)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users           User[]
  apiKeys         ApiKey[]
  budgets         Budget[]
  auditLogs       AuditLog[]

  @@index([slug])
}

enum TenantTier {
  FREE
  PRO
  ENTERPRISE
}

model Conversation {
  id          String   @id @default(uuid())
  userId      String
  title       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  metadata    ConversationMetadata?

  @@index([userId])
  @@index([createdAt])
}

model Message {
  id              String   @id @default(uuid())
  conversationId  String
  role            MessageRole
  content         String   @db.Text
  modelId         String?
  tokensIn        Int?
  tokensOut       Int?
  latencyMs       Int?
  cost            Float?

  createdAt       DateTime @default(now())

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  model           AIModel?     @relation(fields: [modelId], references: [id])
  qualityScore    QualityScore?
  embedding       MessageEmbedding?
  provenance      Provenance?

  @@index([conversationId])
  @@index([createdAt])
  @@index([modelId])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

model ConversationMetadata {
  id              String   @id @default(uuid())
  conversationId  String   @unique
  tags            String[]
  sentiment       Float?
  topic           String?

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// ============================================================================
// AI MODELS & PROVIDERS (v2-v3)
// ============================================================================

model AIProvider {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  baseUrl     String?
  enabled     Boolean  @default(true)

  models      AIModel[]

  @@index([slug])
  @@index([enabled])
}

model AIModel {
  id              String   @id @default(uuid())
  providerId      String
  name            String
  slug            String   @unique
  contextWindow   Int
  costPer1kIn     Float
  costPer1kOut    Float
  capabilities    String[] // ["text", "code", "vision", "audio"]
  avgLatencyMs    Int?
  successRate     Float?

  enabled         Boolean  @default(true)

  provider        AIProvider @relation(fields: [providerId], references: [id])
  messages        Message[]
  routingScores   RoutingScore[]

  @@index([slug])
  @@index([providerId])
  @@index([enabled])
}

model RoutingScore {
  id          String   @id @default(uuid())
  modelId     String
  intent      String
  score       Float
  pulls       Int      @default(0)
  wins        Int      @default(0)

  updatedAt   DateTime @updatedAt

  model       AIModel  @relation(fields: [modelId], references: [id])

  @@unique([modelId, intent])
  @@index([intent])
}

// ============================================================================
// API KEYS & AUTHENTICATION (v2-v6)
// ============================================================================

model ApiKey {
  id          String   @id @default(uuid())
  userId      String
  tenantId    String?
  name        String
  keyHash     String   @unique
  prefix      String
  scopes      String[]

  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([keyHash])
  @@index([userId])
  @@index([tenantId])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  ipAddress   String?
  userAgent   String?

  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// ============================================================================
// GOVERNANCE & BILLING (v6)
// ============================================================================

model Budget {
  id              String   @id @default(uuid())
  tenantId        String
  name            String
  limitUsd        Float
  spentUsd        Float    @default(0)
  period          BudgetPeriod

  resetAt         DateTime
  createdAt       DateTime @default(now())

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Wallet {
  id          String   @id @default(uuid())
  userId      String
  balance     Float    @default(0)
  currency    String   @default("USD")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@index([userId])
}

model WalletTransaction {
  id          String   @id @default(uuid())
  walletId    String
  amount      Float
  type        TransactionType
  description String?

  createdAt   DateTime @default(now())

  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([createdAt])
}

enum TransactionType {
  CREDIT
  DEBIT
  REFUND
}

// ============================================================================
// AUDIT & SECURITY (v7)
// ============================================================================

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String?
  action      String
  resource    String
  resourceId  String?
  ipAddress   String?
  userAgent   String?
  metadata    Json?

  createdAt   DateTime @default(now())

  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([createdAt])
  @@index([action])
}

model EncryptionKey {
  id          String   @id @default(uuid())
  keyId       String   @unique
  version     Int
  algorithm   String
  encryptedDek String   @db.Text

  createdAt   DateTime @default(now())
  rotatedAt   DateTime?

  @@index([keyId])
}

// ============================================================================
// RAG & EMBEDDINGS (v4-v8, v21)
// ============================================================================

model Document {
  id          String   @id @default(uuid())
  tenantId    String?
  title       String
  content     String   @db.Text
  source      String?
  metadata    Json?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chunks      DocumentChunk[]

  @@index([tenantId])
  @@index([createdAt])
}

model DocumentChunk {
  id          String   @id @default(uuid())
  documentId  String
  content     String   @db.Text
  chunkIndex  Int

  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  embedding   ChunkEmbedding?

  @@index([documentId])
}

model ChunkEmbedding {
  id          String   @id @default(uuid())
  chunkId     String   @unique
  embedding   Unsupported("vector(1536)")
  model       String

  createdAt   DateTime @default(now())

  chunk       DocumentChunk @relation(fields: [chunkId], references: [id], onDelete: Cascade)

  @@index([model])
}

model MessageEmbedding {
  id          String   @id @default(uuid())
  messageId   String   @unique
  embedding   Unsupported("vector(1536)")
  model       String

  createdAt   DateTime @default(now())

  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([model])
}

// ============================================================================
// QUALITY ESTIMATION & BANDIT (v10-v11)
// ============================================================================

model QualityScore {
  id              String   @id @default(uuid())
  messageId       String   @unique
  estimatedScore  Float
  actualScore     Float?
  metrics         Json?

  createdAt       DateTime @default(now())

  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([estimatedScore])
}

model BanditArm {
  id          String   @id @default(uuid())
  modelId     String
  intent      String
  pulls       Int      @default(0)
  rewards     Float    @default(0)
  alpha       Float    @default(1)
  beta        Float    @default(1)

  updatedAt   DateTime @updatedAt

  @@unique([modelId, intent])
  @@index([intent])
}

// ============================================================================
// CACHE (v12)
// ============================================================================

model SemanticCache {
  id              String   @id @default(uuid())
  queryHash       String   @unique
  queryEmbedding  Unsupported("vector(1536)")
  response        String   @db.Text
  modelId         String
  hitCount        Int      @default(0)

  expiresAt       DateTime
  createdAt       DateTime @default(now())
  lastAccessedAt  DateTime @default(now())

  @@index([expiresAt])
  @@index([modelId])
}

// ============================================================================
// MULTI-REGION & CRDT (v13)
// ============================================================================

model CRDTState {
  id          String   @id @default(uuid())
  resourceType String
  resourceId  String
  nodeId      String
  hlc         String
  state       Json

  updatedAt   DateTime @updatedAt

  @@unique([resourceType, resourceId, nodeId])
  @@index([resourceType, resourceId])
  @@index([hlc])
}

// ============================================================================
// RL & RLHF (v15-v16)
// ============================================================================

model Feedback {
  id          String   @id @default(uuid())
  messageId   String
  userId      String
  rating      Int
  comment     String?

  createdAt   DateTime @default(now())

  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
}

model TrainingExample {
  id          String   @id @default(uuid())
  prompt      String   @db.Text
  completion  String   @db.Text
  rating      Float
  source      String

  createdAt   DateTime @default(now())

  @@index([rating])
  @@index([source])
}

// ============================================================================
// PROVENANCE & EXPLAINABILITY (v9)
// ============================================================================

model Provenance {
  id              String   @id @default(uuid())
  messageId       String   @unique
  modelId         String
  inputHash       String
  outputHash      String
  watermark       String?
  citations       Json?

  createdAt       DateTime @default(now())

  message         Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([inputHash])
  @@index([outputHash])
}

model ExplainabilityLog {
  id              String   @id @default(uuid())
  messageId       String
  method          String   // "LIME", "SHAP"
  features        Json
  importance      Json

  createdAt       DateTime @default(now())

  @@index([messageId])
  @@index([method])
}

// ============================================================================
// ORCHESTRATION & WORKFLOWS (v4-v5, v23)
// ============================================================================

model Workflow {
  id          String   @id @default(uuid())
  name        String
  description String?
  dag         Json

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  runs        WorkflowRun[]

  @@index([name])
}

model WorkflowRun {
  id          String   @id @default(uuid())
  workflowId  String
  status      WorkflowStatus
  input       Json?
  output      Json?
  error       String?

  startedAt   DateTime @default(now())
  completedAt DateTime?

  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  steps       WorkflowStep[]

  @@index([workflowId])
  @@index([status])
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model WorkflowStep {
  id          String   @id @default(uuid())
  runId       String
  stepName    String
  status      WorkflowStatus
  input       Json?
  output      Json?
  error       String?

  startedAt   DateTime @default(now())
  completedAt DateTime?

  run         WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId])
}

// ============================================================================
// TRUST & SAFETY (v19)
// ============================================================================

model ModerationResult {
  id              String   @id @default(uuid())
  contentId       String
  contentType     String
  flagged         Boolean
  categories      String[]
  scores          Json
  action          String?

  createdAt       DateTime @default(now())

  @@index([contentId])
  @@index([flagged])
  @@index([createdAt])
}

model TrustScore {
  id          String   @id @default(uuid())
  userId      String
  score       Float
  factors     Json

  updatedAt   DateTime @updatedAt

  @@unique([userId])
  @@index([score])
}

// ============================================================================
// COMPLIANCE (v25)
// ============================================================================

model DSARRequest {
  id          String   @id @default(uuid())
  userId      String
  type        DSARType
  status      DSARStatus
  data        Json?

  requestedAt DateTime @default(now())
  completedAt DateTime?

  @@index([userId])
  @@index([status])
}

enum DSARType {
  ACCESS
  DELETION
  RECTIFICATION
  PORTABILITY
}

enum DSARStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

// ============================================================================
// USER PREFERENCES (v3)
// ============================================================================

model UserPreference {
  id              String   @id @default(uuid())
  userId          String   @unique
  preferredModel  String?
  temperature     Float?
  maxTokens       Int?
  customSettings  Json?

  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ============================================================================
// OBSERVABILITY (v20)
// ============================================================================

model Incident {
  id              String   @id @default(uuid())
  title           String
  description     String   @db.Text
  severity        IncidentSeverity
  status          IncidentStatus

  detectedAt      DateTime @default(now())
  resolvedAt      DateTime?

  @@index([status])
  @@index([severity])
  @@index([detectedAt])
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
}

version: '3.9'

# ========================================
# LYDIAN APPLICATION SDK - DOCKER COMPOSE
# Full local development environment
# White-Hat: Zero production secrets in repo
# ========================================

services:
  # ========== Database ==========
  postgres:
    image: postgres:16-alpine
    container_name: lydian-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: lydian
      POSTGRES_USER: lydian
      POSTGRES_PASSWORD: lydian_dev_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lydian"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Redis Cache ==========
  redis:
    image: redis:7-alpine
    container_name: lydian-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass lydian_dev_redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - lydian-network

  # ========== Vault (Secrets Management) ==========
  vault:
    image: hashicorp/vault:1.15
    container_name: lydian-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: lydian-dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
    command: server -dev
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Kafka (Event Streaming) ==========
  kafka:
    image: bitnami/kafka:3.6
    container_name: lydian-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode (no Zookeeper)
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_KRAFT_CLUSTER_ID: lydian-kafka-cluster-1
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - lydian-network

  # ========== Temporal (Workflow Engine) ==========
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: lydian-temporal
    restart: unless-stopped
    ports:
      - "7233:7233"   # gRPC
      - "8088:8088"   # Web UI
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: lydian
      POSTGRES_PWD: lydian_dev_password
      POSTGRES_SEEDS: postgres
      DYNAMIC_CONFIG_FILE_PATH: config/dynamicconfig/development-sql.yaml
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - temporal_data:/etc/temporal
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - lydian-network

  # ========== Prometheus (Metrics) ==========
  prometheus:
    image: prom/prometheus:v2.48
    container_name: lydian-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== Grafana (Visualization) ==========
  grafana:
    image: grafana/grafana:10.2.3
    container_name: lydian-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: lydian_dev_grafana
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3003
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lydian-network

  # ========== PgAdmin (Database UI - Optional) ==========
  pgadmin:
    image: dpage/pgadmin4:8.1
    container_name: lydian-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ailydian.com
      PGADMIN_DEFAULT_PASSWORD: lydian_dev_pgadmin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - lydian-network

# ========== Volumes ==========
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  kafka_data:
    driver: local
  temporal_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

# ========== Networks ==========
networks:
  lydian-network:
    driver: bridge
    name: lydian-network

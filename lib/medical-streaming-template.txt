// Add to imports (top of file):
const { SSEStreamer } = require('../../lib/io/streaming');
const { executeWithSentinel } = require('../../lib/middleware/tokenGovernorMiddleware');

// Add to request body destructuring:
stream              // Boolean: enable SSE streaming

// Add before processing:
const model = req.tokenGovernor?.model || 'claude-sonnet-4-5';
const sessionId = `MODULE_NAME-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

// Add streaming mode check:
if (stream === true) {
    const streamer = new SSEStreamer(res, {
        model: model,
        maxOutputTokens: 4096,
        flushIntervalMs: 100
    });

    streamer.start(sessionId, {
        priority: req.tokenGovernor?.priority || 'P0_clinical',
        endpoint: '/api/medical/MODULE_NAME'
    });

    await executeWithSentinel(model, async () => {
        // Stream your analysis here
        streamer.write('Processing...\n', 10);
        // ... rest of streaming logic
    });

    streamer.end('COMPLETE');
    return;
}

// Add to metadata in non-streaming response:
tokenGovernor: req.tokenGovernor ? {
    model: req.tokenGovernor.model,
    priority: req.tokenGovernor.priority,
    tokensGranted: req.tokenGovernor.granted,
    tokensRemaining: req.tokenGovernor.remaining
} : null

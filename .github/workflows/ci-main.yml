# ========================================
# LYDIAN SDK - CI/CD PIPELINE
# Zero-tolerance: Red build blocks deployment
# White-Hat: Security scans, compliance checks
# ========================================

name: CI/CD Main Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ========== Job 1: Typecheck & Lint ==========
  typecheck-lint:
    name: Typecheck & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript typecheck
        run: pnpm run type-check
        continue-on-error: false

      - name: ESLint
        run: pnpm run lint
        continue-on-error: false

      - name: Prettier check
        run: pnpm run format:check
        continue-on-error: false

  # ========== Job 2: Unit Tests ==========
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit --coverage
        continue-on-error: false

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unit
          fail_ci_if_error: false

  # ========== Job 3: Build ==========
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [typecheck-lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm run build
        continue-on-error: false

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            services/*/dist
            apps/*/.next
          key: build-${{ github.sha }}

  # ========== Job 4: Security Scan ==========
  security-scan:
    name: Security Scan (npm audit, SAST)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: npm audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Check for secrets (gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false

      - name: SAST scan (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
        continue-on-error: true

  # ========== Job 5: Legal Gate Validation ==========
  legal-gate-validation:
    name: Legal Gate Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate connector status
        run: |
          echo "üîí Validating Legal Gate..."

          # Check all connector config.json files
          for config in packages/connectors-*/src/*/config.json; do
            if [ -f "$config" ]; then
              connector=$(basename $(dirname "$config"))
              mode=$(jq -r '.mode' "$config")
              status=$(jq -r '.status' "$config")

              echo "Connector: $connector | Mode: $mode | Status: $status"

              # Fail if partner_required but status != partner_ok/sandbox/disabled
              if [ "$mode" = "partner_required" ] && [ "$status" = "production" ]; then
                echo "‚ùå ERROR: Connector $connector requires partner approval but status=$status"
                exit 1
              fi
            fi
          done

          echo "‚úÖ Legal Gate validation passed"

  # ========== Job 6: Contract Tests (Mock APIs) ==========
  contract-tests:
    name: Contract Tests (MSW/Nock)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run contract tests
        run: pnpm run test:contract
        continue-on-error: false

  # ========== Job 7: Integration Tests ==========
  integration-tests:
    name: Integration Tests (Docker Compose)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Start services (Docker Compose)
        run: |
          cd infra/docker-compose
          docker-compose up -d postgres redis
          sleep 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DB_URL: postgresql://lydian:lydian_dev_password@localhost:5432/lydian
          REDIS_URL: redis://:lydian_dev_redis@localhost:6379
        continue-on-error: false

      - name: Stop services
        if: always()
        run: |
          cd infra/docker-compose
          docker-compose down -v

  # ========== Job 8: E2E Tests (Playwright) ==========
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm run test:e2e
        continue-on-error: false

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-report
          path: playwright-report/

  # ========== Job 9: Deploy (on main push) ==========
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [typecheck-lint, unit-tests, build, security-scan, legal-gate-validation, contract-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy notification
        run: |
          echo "üöÄ Deploying to staging..."
          echo "All checks passed. Ready for deployment."

      # TODO: Add actual deployment steps (Vercel, Azure, etc.)

  # ========== Job 10: Performance Budgets ==========
  performance-check:
    name: Performance Budgets
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lighthouse CI
        run: pnpm run lighthouse:ci
        continue-on-error: true

      - name: Bundle size check
        run: pnpm run bundle-size:check
        continue-on-error: true

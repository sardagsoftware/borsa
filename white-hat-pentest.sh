#!/bin/bash

###############################################################################
# WHITE-HAT PENETRATION TESTING SCRIPT
# Defensive Security Testing - OWASP Top 10 Compliance Check
# Target: LyDian Platform (ailydian.com)
#
# This script performs ethical security testing following white-hat principles:
# - Read-only testing (no data modification)
# - No DoS attacks
# - Security header validation
# - Common vulnerability detection
# - OWASP Top 10 compliance check
###############################################################################

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test configuration
TARGET_URL="${1:-http://localhost:3100}"
REPORT_FILE="pentest-report-$(date +%Y%m%d-%H%M%S).txt"

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  🛡️  LyDian Platform - White-Hat Penetration Test"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Target: $TARGET_URL"
echo "Report: $REPORT_FILE"
echo ""

# Initialize report
{
  echo "LyDian Platform - Security Penetration Test Report"
  echo "=================================================="
  echo ""
  echo "Test Date: $(date)"
  echo "Target: $TARGET_URL"
  echo "Tester: White-Hat Security Audit (Automated)"
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
} > "$REPORT_FILE"

# Test counters
PASS=0
FAIL=0
WARNING=0

###############################################################################
# Test Function
###############################################################################
run_test() {
  local test_name="$1"
  local test_command="$2"
  local expected_result="$3"
  local severity="${4:-MEDIUM}"

  echo -n "Testing: $test_name... "

  result=$(eval "$test_command" 2>&1)
  exit_code=$?

  if echo "$result" | grep -q "$expected_result"; then
    echo -e "${GREEN}✓ PASS${NC}"
    PASS=$((PASS + 1))
    {
      echo "✓ PASS: $test_name"
      echo "   Severity: $severity"
      echo "   Result: Expected pattern found"
      echo ""
    } >> "$REPORT_FILE"
  else
    echo -e "${RED}✗ FAIL${NC}"
    FAIL=$((FAIL + 1))
    {
      echo "✗ FAIL: $test_name"
      echo "   Severity: $severity"
      echo "   Expected: $expected_result"
      echo "   Got: $result"
      echo ""
    } >> "$REPORT_FILE"
  fi
}

###############################################################################
# 1. SECURITY HEADERS TEST (OWASP A05:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  1. Security Headers (OWASP A05:2021 - Misconfiguration)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

run_test \
  "X-Content-Type-Options header" \
  "curl -s -I '$TARGET_URL' | grep -i 'X-Content-Type-Options'" \
  "nosniff" \
  "HIGH"

run_test \
  "X-Frame-Options header" \
  "curl -s -I '$TARGET_URL' | grep -i 'X-Frame-Options'" \
  "DENY" \
  "HIGH"

run_test \
  "Strict-Transport-Security header" \
  "curl -s -I '$TARGET_URL' | grep -i 'Strict-Transport-Security'" \
  "max-age" \
  "HIGH"

run_test \
  "Content-Security-Policy header" \
  "curl -s -I '$TARGET_URL' | grep -i 'Content-Security-Policy'" \
  "default-src" \
  "HIGH"

run_test \
  "X-XSS-Protection header" \
  "curl -s -I '$TARGET_URL' | grep -i 'X-XSS-Protection'" \
  "1" \
  "MEDIUM"

###############################################################################
# 2. INJECTION ATTACKS TEST (OWASP A03:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  2. Injection Attack Protection (OWASP A03:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# SQL Injection Test
run_test \
  "SQL Injection Protection (GET)" \
  "curl -s -o /dev/null -w '%{http_code}' '$TARGET_URL/api/chat?q=1%27%20OR%20%271%27%3D%271'" \
  "400\|403\|404" \
  "CRITICAL"

# XSS Test
run_test \
  "XSS Protection (GET)" \
  "curl -s -o /dev/null -w '%{http_code}' '$TARGET_URL/?search=<script>alert(1)</script>'" \
  "400\|403" \
  "HIGH"

# Command Injection Test
run_test \
  "Command Injection Protection" \
  "curl -s -o /dev/null -w '%{http_code}' '$TARGET_URL/api/chat?cmd=ls%20-la'" \
  "400\|403\|404" \
  "CRITICAL"

###############################################################################
# 3. AUTHENTICATION & AUTHORIZATION (OWASP A07:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  3. Authentication & Authorization (OWASP A07:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test protected endpoint without auth
run_test \
  "Protected API requires authentication" \
  "curl -s -o /dev/null -w '%{http_code}' '$TARGET_URL/api/admin/users'" \
  "401\|403" \
  "HIGH"

# Test session fixation protection
run_test \
  "Session management security" \
  "curl -s -I '$TARGET_URL' | grep -i 'Set-Cookie' | grep -i 'HttpOnly\|Secure'" \
  "HttpOnly\|Secure\|200" \
  "MEDIUM"

###############################################################################
# 4. SENSITIVE DATA EXPOSURE (OWASP A02:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  4. Sensitive Data Exposure (OWASP A02:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check for exposed environment variables
run_test \
  "Environment variables not exposed" \
  "curl -s '$TARGET_URL/.env' -o /dev/null -w '%{http_code}'" \
  "404\|403" \
  "CRITICAL"

# Check for exposed config files
run_test \
  "Config files not exposed" \
  "curl -s '$TARGET_URL/config.json' -o /dev/null -w '%{http_code}'" \
  "404\|403" \
  "HIGH"

# Check for directory listing
run_test \
  "Directory listing disabled" \
  "curl -s '$TARGET_URL/api/' -o /dev/null -w '%{http_code}'" \
  "404\|403\|405" \
  "MEDIUM"

###############################################################################
# 5. SECURITY MISCONFIGURATION (OWASP A05:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  5. Security Misconfiguration (OWASP A05:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check for verbose error messages
run_test \
  "Error messages not verbose" \
  "curl -s '$TARGET_URL/nonexistent' | grep -v 'stack trace\|SQL error\|Exception'" \
  ".*" \
  "LOW"

# Check for server banner exposure
run_test \
  "Server banner minimal/hidden" \
  "curl -s -I '$TARGET_URL' | grep -i 'Server:' | grep -v 'Express\|Node'" \
  ".*" \
  "LOW"

###############################################################################
# 6. CROSS-SITE REQUEST FORGERY (CSRF) (OWASP A01:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  6. CSRF Protection (OWASP A01:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check for CSRF token in forms
run_test \
  "CSRF tokens present in forms" \
  "curl -s '$TARGET_URL/auth.html' | grep -i 'csrf'" \
  "csrf\|200" \
  "HIGH"

###############################################################################
# 7. INSECURE DESERIALIZATION (OWASP A08:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  7. Insecure Deserialization (OWASP A08:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test malformed JSON
run_test \
  "Malformed JSON handling" \
  "curl -s -X POST -H 'Content-Type: application/json' -d '{invalid}' '$TARGET_URL/api/chat' -o /dev/null -w '%{http_code}'" \
  "400" \
  "MEDIUM"

###############################################################################
# 8. USING COMPONENTS WITH KNOWN VULNERABILITIES (OWASP A06:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  8. Known Vulnerabilities (OWASP A06:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check robots.txt for sensitive paths
run_test \
  "Robots.txt configured properly" \
  "curl -s '$TARGET_URL/robots.txt' -o /dev/null -w '%{http_code}'" \
  "200" \
  "LOW"

###############################################################################
# 9. INSUFFICIENT LOGGING & MONITORING (OWASP A09:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  9. Logging & Monitoring (OWASP A09:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check monitoring endpoint
run_test \
  "Health monitoring endpoint available" \
  "curl -s '$TARGET_URL/api/health' -o /dev/null -w '%{http_code}'" \
  "200" \
  "MEDIUM"

# Check metrics endpoint
run_test \
  "Metrics endpoint available" \
  "curl -s '$TARGET_URL/api/metrics/dashboard' -o /dev/null -w '%{http_code}'" \
  "200" \
  "MEDIUM"

###############################################################################
# 10. SERVER-SIDE REQUEST FORGERY (SSRF) (OWASP A10:2021)
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  10. SSRF Protection (OWASP A10:2021)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test SSRF protection
run_test \
  "SSRF protection (internal IP)" \
  "curl -s -o /dev/null -w '%{http_code}' '$TARGET_URL/api/chat?url=http://127.0.0.1:22'" \
  "400\|403\|404" \
  "HIGH"

###############################################################################
# 11. CACHE SECURITY
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  11. Cache Security"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Check HTML cache headers
run_test \
  "HTML files have no-cache headers" \
  "curl -s -I '$TARGET_URL/index.html' | grep -i 'Cache-Control' | grep -i 'no-cache\|no-store'" \
  "no-cache\|no-store\|200" \
  "LOW"

# Check static asset caching
run_test \
  "Static assets have cache headers" \
  "curl -s -I '$TARGET_URL/css/global-lydian-branding.css' | grep -i 'Cache-Control'" \
  "Cache-Control\|200" \
  "LOW"

###############################################################################
# REPORT SUMMARY
###############################################################################
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "  Test Summary"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo -e "${GREEN}✓ Passed:${NC} $PASS tests"
echo -e "${RED}✗ Failed:${NC} $FAIL tests"
echo ""

# Calculate security score
TOTAL=$((PASS + FAIL))
if [ $TOTAL -gt 0 ]; then
  SCORE=$(( (PASS * 100) / TOTAL ))
else
  SCORE=0
fi

echo "Security Score: $SCORE/100"
echo ""

# Add summary to report
{
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "TEST SUMMARY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
  echo "Total Tests: $TOTAL"
  echo "Passed: $PASS"
  echo "Failed: $FAIL"
  echo ""
  echo "Security Score: $SCORE/100"
  echo ""

  if [ $SCORE -ge 90 ]; then
    echo "Grade: A (Excellent)"
  elif [ $SCORE -ge 80 ]; then
    echo "Grade: B (Good)"
  elif [ $SCORE -ge 70 ]; then
    echo "Grade: C (Fair)"
  elif [ $SCORE -ge 60 ]; then
    echo "Grade: D (Poor)"
  else
    echo "Grade: F (Critical Issues)"
  fi

  echo ""
  echo "Report generated: $(date)"
  echo ""
} >> "$REPORT_FILE"

# Display report location
echo "Full report saved to: $REPORT_FILE"
echo ""

# Exit with appropriate code
if [ $FAIL -gt 0 ]; then
  exit 1
else
  exit 0
fi

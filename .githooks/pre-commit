#!/bin/bash

# ============================
# 🌍 LyDian i18n Pre-Commit Hook
# ============================
#
# This hook validates i18n files before committing:
# - Checks JSON syntax
# - Validates translation completeness
# - Runs quick grammar QA
# - Checks for security issues
#
# Installation:
#   ./scripts/install-hooks.sh
#
# Bypass (not recommended):
#   git commit --no-verify
#
# @author LyDian AI Platform
# @license MIT
# @version 2.0.0

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}🌍 Running i18n validation checks...${NC}"
echo ""

# ============================
# VARIABLES
# ============================

I18N_DIR="public/i18n/v2"
OPS_DIR="ops"
TOOLS_DIR="ops/tools"
EXIT_CODE=0

# ============================
# HELPER FUNCTIONS
# ============================

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# ============================
# CHECK 1: JSON Syntax
# ============================

log_info "Checking JSON syntax..."

INVALID_JSON=0
JSON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(json)$' || true)

if [ -n "$JSON_FILES" ]; then
    for file in $JSON_FILES; do
        if [ -f "$file" ]; then
            if ! jq empty "$file" 2>/dev/null; then
                log_error "Invalid JSON: $file"
                INVALID_JSON=$((INVALID_JSON + 1))
                EXIT_CODE=1
            fi
        fi
    done

    if [ $INVALID_JSON -eq 0 ]; then
        log_success "All JSON files are valid"
    else
        log_error "Found $INVALID_JSON invalid JSON files"
    fi
else
    log_info "No JSON files to validate"
fi

# ============================
# CHECK 2: Translation Files
# ============================

log_info "Checking translation files..."

TRANSLATION_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^$I18N_DIR/.*\.json$" || true)

if [ -n "$TRANSLATION_FILES" ]; then
    MODIFIED_LANGS=""

    for file in $TRANSLATION_FILES; do
        # Extract language code from path (e.g., public/i18n/v2/en/nav.json -> en)
        if [[ $file =~ $I18N_DIR/([^/]+)/ ]]; then
            LANG="${BASH_REMATCH[1]}"
            if [[ ! " $MODIFIED_LANGS " =~ " $LANG " ]]; then
                MODIFIED_LANGS="$MODIFIED_LANGS $LANG"
            fi
        fi
    done

    log_success "Modified translations: $MODIFIED_LANGS"

    # Quick validation: Check if all keys exist
    for lang in $MODIFIED_LANGS; do
        if [ "$lang" != "tr" ]; then
            log_info "Validating $lang translations..."

            # Count keys in source (Turkish)
            SOURCE_KEYS=$(find "$I18N_DIR/tr" -name "*.json" -not -name "index.json" -exec jq 'keys | length' {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

            # Count keys in target language
            TARGET_KEYS=$(find "$I18N_DIR/$lang" -name "*.json" -not -name "index.json" -exec jq 'keys | length' {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")

            if [ "$TARGET_KEYS" -eq 0 ]; then
                log_warning "$lang has no translations (expected $SOURCE_KEYS keys)"
            elif [ "$TARGET_KEYS" -lt "$SOURCE_KEYS" ]; then
                COVERAGE=$(echo "scale=1; $TARGET_KEYS * 100 / $SOURCE_KEYS" | bc 2>/dev/null || echo "0")
                log_warning "$lang is incomplete: $TARGET_KEYS/$SOURCE_KEYS keys (${COVERAGE}%)"
            else
                log_success "$lang is complete: $TARGET_KEYS keys"
            fi
        fi
    done
else
    log_info "No translation files modified"
fi

# ============================
# CHECK 3: Glossary Changes
# ============================

log_info "Checking glossary..."

GLOSSARY_FILE="$OPS_DIR/i18n/glossary.json"
GLOSSARY_MODIFIED=$(git diff --cached --name-only --diff-filter=ACM | grep -F "$GLOSSARY_FILE" || true)

if [ -n "$GLOSSARY_MODIFIED" ]; then
    log_info "Glossary was modified, validating..."

    if [ -f "$GLOSSARY_FILE" ]; then
        # Validate JSON
        if ! jq empty "$GLOSSARY_FILE" 2>/dev/null; then
            log_error "Invalid JSON in glossary.json"
            EXIT_CODE=1
        else
            # Count terms
            TERM_COUNT=$(jq '.terms | length' "$GLOSSARY_FILE")
            PATTERN_COUNT=$(jq '.protectedPatterns | length' "$GLOSSARY_FILE")

            log_success "Glossary validated: $TERM_COUNT terms, $PATTERN_COUNT patterns"
        fi
    fi
else
    log_info "Glossary unchanged"
fi

# ============================
# CHECK 4: Security Scan
# ============================

log_info "Running security scan..."

SECURITY_ISSUES=0

# Check for XSS in translation files
XSS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^$I18N_DIR/.*\.json$" | xargs grep -l '<script' 2>/dev/null || true)

if [ -n "$XSS_FILES" ]; then
    log_error "Found <script> tags in translation files (XSS risk):"
    echo "$XSS_FILES"
    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
    EXIT_CODE=1
fi

# Check for RTL override characters (U+202E, U+202D)
RTL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "^$I18N_DIR/.*\.json$" | xargs grep -P '\\u202E|\\u202D' 2>/dev/null || true)

if [ -n "$RTL_FILES" ]; then
    log_warning "Found RTL override characters (potential spoofing):"
    echo "$RTL_FILES"
fi

if [ $SECURITY_ISSUES -eq 0 ]; then
    log_success "No security issues found"
fi

# ============================
# CHECK 5: HTML Files with i18n Keys
# ============================

log_info "Checking HTML files for i18n keys..."

HTML_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.html$' || true)

if [ -n "$HTML_FILES" ]; then
    MISSING_KEYS=0

    for file in $HTML_FILES; do
        if [ -f "$file" ]; then
            # Look for data-i18n attributes
            I18N_KEYS=$(grep -oP 'data-i18n="\K[^"]+' "$file" 2>/dev/null || true)

            if [ -n "$I18N_KEYS" ]; then
                # Check if keys exist in source translations (tr)
                while IFS= read -r key; do
                    # Check in all Turkish translation files
                    KEY_EXISTS=$(find "$I18N_DIR/tr" -name "*.json" -exec jq -r ".$key" {} + 2>/dev/null | grep -v "null" || true)

                    if [ -z "$KEY_EXISTS" ]; then
                        log_warning "Missing translation key in $file: $key"
                        MISSING_KEYS=$((MISSING_KEYS + 1))
                    fi
                done <<< "$I18N_KEYS"
            fi
        fi
    done

    if [ $MISSING_KEYS -gt 0 ]; then
        log_warning "Found $MISSING_KEYS missing translation keys. Run: node $TOOLS_DIR/extract-i18n-strings.js --all"
    else
        log_success "All i18n keys exist in translations"
    fi
else
    log_info "No HTML files modified"
fi

# ============================
# FINAL SUMMARY
# ============================

echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
    echo ""
    echo -e "${BLUE}📝 Tip: Run 'node $TOOLS_DIR/lydian-i18n.js status' to see full i18n system status${NC}"
else
    echo -e "${RED}❌ Some pre-commit checks failed!${NC}"
    echo ""
    echo -e "${YELLOW}Fix the issues above or bypass with: git commit --no-verify${NC}"
    echo -e "${YELLOW}(Not recommended - may break i18n system)${NC}"
fi

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

exit $EXIT_CODE

#!/bin/bash

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# LYDIAN ECOSYSTEM - AUTOMATED PENETRATION TEST
# White-Hat Security Audit Script
# Date: 2025-10-10
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Report file
REPORT_FILE="ops/security/pentest-report-$(date +%Y%m%d-%H%M%S).md"
TARGET_URL="${TARGET_URL:-http://localhost:3100}"
PROD_URL="https://www.ailydian.com"

# Create report header
cat > "$REPORT_FILE" << 'EOF'
# üîí LYDIAN ECOSYSTEM PENETRATION TEST REPORT

**Date**: $(date)
**Tester**: Automated Security Audit
**Methodology**: White-Hat Ethical Hacking
**Scope**: Full Stack (Frontend, Backend, API, Database)

---

## üìã EXECUTIVE SUMMARY

This report documents a comprehensive security audit of the Lydian ecosystem, following OWASP Top 10 and industry best practices.

**Compliance**: White-Hat Security Guidelines ‚úÖ

---

EOF

echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë   LYDIAN ECOSYSTEM - PENETRATION TEST (WHITE-HAT)             ‚ïë${NC}"
echo -e "${CYAN}‚ïë   Target: $TARGET_URL                            ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 1: SYSTEM INVENTORY
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[1/14] üìä SYSTEM INVENTORY${NC}"
{
    echo "## 1. SYSTEM INVENTORY"
    echo ""
    echo "### Project Statistics"
    echo "\`\`\`"
    echo "Total Files: $(find . -type f 2>/dev/null | wc -l | tr -d ' ')"
    echo "JavaScript Files: $(find . -name '*.js' -type f 2>/dev/null | wc -l | tr -d ' ')"
    echo "TypeScript Files: $(find . -name '*.ts' -type f 2>/dev/null | wc -l | tr -d ' ')"
    echo "HTML Pages: $(find public -name '*.html' -type f 2>/dev/null | wc -l | tr -d ' ')"
    echo "API Endpoints: $(ls -1 api/*.js 2>/dev/null | wc -l | tr -d ' ') root + $(ls -1d api/*/ 2>/dev/null | wc -l | tr -d ' ') directories"
    echo "Backend Services: $(ls -1 server.js middleware/*.js 2>/dev/null | wc -l | tr -d ' ')"
    echo "Security Configs: $(ls -1 security/*.js middleware/rate-limit*.js 2>/dev/null | wc -l | tr -d ' ')"
    echo "\`\`\`"
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Inventory complete${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 2: NPM DEPENDENCIES CVE SCAN
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[2/14] üîç NPM VULNERABILITY SCAN${NC}"
{
    echo "## 2. NPM VULNERABILITY SCAN"
    echo ""
    NPM_AUDIT=$(npm audit --json 2>&1)
    VULN_COUNT=$(echo "$NPM_AUDIT" | jq -r '.metadata.vulnerabilities.total' 2>/dev/null || echo "0")

    if [ "$VULN_COUNT" = "0" ]; then
        echo "**Status**: ‚úÖ **PASS** - No vulnerabilities detected"
    else
        echo "**Status**: ‚ö†Ô∏è **ALERT** - $VULN_COUNT vulnerabilities found"
        echo ""
        echo "### Vulnerability Breakdown"
        echo "\`\`\`json"
        echo "$NPM_AUDIT" | jq -r '.metadata.vulnerabilities' 2>/dev/null || echo "Error parsing audit"
        echo "\`\`\`"
    fi
    echo ""
    echo "**Total Dependencies**: $(echo "$NPM_AUDIT" | jq -r '.metadata.dependencies.total' 2>/dev/null || echo "Unknown")"
    echo ""
} >> "$REPORT_FILE"

if [ "$VULN_COUNT" = "0" ]; then
    echo -e "${GREEN}‚úì No vulnerabilities found${NC}"
else
    echo -e "${YELLOW}‚ö† $VULN_COUNT vulnerabilities detected${NC}"
fi

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 3: ENVIRONMENT VARIABLES & SECRETS
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[3/14] üîê SECRETS & ENVIRONMENT VARIABLES${NC}"
{
    echo "## 3. SECRETS & ENVIRONMENT VARIABLES"
    echo ""

    # Count process.env usage
    ENV_COUNT=$(grep -r "process.env" api --include="*.js" 2>/dev/null | wc -l | tr -d ' ')
    echo "**process.env Usage**: $ENV_COUNT occurrences"
    echo ""

    # Check for hardcoded secrets (common patterns)
    echo "### Hardcoded Secrets Scan"
    HARDCODED_SECRETS=0

    # Pattern 1: API keys in quotes
    if grep -r "api[_-]key.*=.*['\"]" api --include="*.js" -i 2>/dev/null | grep -v "process.env" | grep -v "//" | head -5; then
        HARDCODED_SECRETS=$((HARDCODED_SECRETS + 1))
    fi

    # Pattern 2: Password in quotes
    if grep -r "password.*=.*['\"]" api --include="*.js" -i 2>/dev/null | grep -v "process.env" | grep -v "//" | grep -v "placeholder" | head -5; then
        HARDCODED_SECRETS=$((HARDCODED_SECRETS + 1))
    fi

    # Pattern 3: Secret tokens
    if grep -r "secret.*=.*['\"]" api --include="*.js" -i 2>/dev/null | grep -v "process.env" | grep -v "//" | head -5; then
        HARDCODED_SECRETS=$((HARDCODED_SECRETS + 1))
    fi

    if [ $HARDCODED_SECRETS -eq 0 ]; then
        echo "**Status**: ‚úÖ **PASS** - No obvious hardcoded secrets detected"
    else
        echo "**Status**: ‚ö†Ô∏è **REVIEW NEEDED** - Potential hardcoded secrets found"
    fi

    echo ""
    echo "### .env Files"
    ls -la .env* 2>/dev/null | awk '{print $9}' || echo "No .env files in root"
    echo ""

    echo "**Recommendation**: All secrets should use process.env and be stored in .env files (not committed to git)"
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Secrets scan complete${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 4: SECURITY HEADERS (Production)
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[4/14] üõ°Ô∏è  SECURITY HEADERS${NC}"
{
    echo "## 4. SECURITY HEADERS"
    echo ""
    echo "### Production Headers ($PROD_URL)"
    echo "\`\`\`"

    HEADERS=$(curl -I -s "$PROD_URL" 2>&1 | grep -i -E "content-security-policy|x-frame-options|x-content-type-options|strict-transport-security|x-xss-protection|referrer-policy|permissions-policy")

    if echo "$HEADERS" | grep -qi "content-security-policy"; then
        echo "‚úÖ Content-Security-Policy: PRESENT"
    else
        echo "‚ùå Content-Security-Policy: MISSING"
    fi

    if echo "$HEADERS" | grep -qi "x-frame-options"; then
        echo "‚úÖ X-Frame-Options: PRESENT"
    else
        echo "‚ùå X-Frame-Options: MISSING"
    fi

    if echo "$HEADERS" | grep -qi "x-content-type-options"; then
        echo "‚úÖ X-Content-Type-Options: PRESENT"
    else
        echo "‚ùå X-Content-Type-Options: MISSING"
    fi

    if echo "$HEADERS" | grep -qi "strict-transport-security"; then
        echo "‚úÖ Strict-Transport-Security: PRESENT"
    else
        echo "‚ùå Strict-Transport-Security: MISSING"
    fi

    if echo "$HEADERS" | grep -qi "x-xss-protection"; then
        echo "‚úÖ X-XSS-Protection: PRESENT"
    else
        echo "‚ùå X-XSS-Protection: MISSING"
    fi

    if echo "$HEADERS" | grep -qi "referrer-policy"; then
        echo "‚úÖ Referrer-Policy: PRESENT"
    else
        echo "‚ùå Referrer-Policy: MISSING"
    fi

    echo "\`\`\`"
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Security headers checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 5: CORS CONFIGURATION
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[5/14] üåê CORS CONFIGURATION${NC}"
{
    echo "## 5. CORS CONFIGURATION"
    echo ""

    # Check CORS config in server.js
    if grep -q "cors" server.js 2>/dev/null; then
        echo "**CORS Middleware**: ‚úÖ Detected in server.js"
    else
        echo "**CORS Middleware**: ‚ö†Ô∏è Not found in server.js"
    fi
    echo ""

    # Check for wildcard CORS
    if grep -r "Access-Control-Allow-Origin.*\*" server.js security/*.js 2>/dev/null; then
        echo "**Status**: ‚ö†Ô∏è **WARNING** - Wildcard CORS detected (Access-Control-Allow-Origin: *)"
        echo ""
        echo "**Risk**: Allows any origin to access API"
        echo "**Recommendation**: Use whitelist of allowed origins"
    else
        echo "**Status**: ‚úÖ **PASS** - No wildcard CORS detected"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì CORS configuration checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 6: RATE LIMITING
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[6/14] ‚è±Ô∏è  RATE LIMITING${NC}"
{
    echo "## 6. RATE LIMITING"
    echo ""

    # Check rate limiting middleware
    RATE_LIMIT_FILES=$(find middleware -name "*rate*" -type f 2>/dev/null | wc -l | tr -d ' ')

    if [ "$RATE_LIMIT_FILES" -gt 0 ]; then
        echo "**Rate Limiting Middleware**: ‚úÖ $RATE_LIMIT_FILES file(s) found"
        echo ""
        echo "Files:"
        find middleware -name "*rate*" -type f 2>/dev/null | while read file; do
            echo "- $file"
        done
    else
        echo "**Rate Limiting Middleware**: ‚ö†Ô∏è Not found"
    fi
    echo ""

    # Check for express-rate-limit usage
    if grep -r "express-rate-limit\|rate-limit" server.js api/*.js middleware/*.js 2>/dev/null | head -5; then
        echo ""
        echo "**Status**: ‚úÖ **PASS** - Rate limiting implemented"
    else
        echo "**Status**: ‚ö†Ô∏è **WARNING** - Rate limiting not detected"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Rate limiting checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 7: AUTHENTICATION ENDPOINTS
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[7/14] üîë AUTHENTICATION ENDPOINTS${NC}"
{
    echo "## 7. AUTHENTICATION ENDPOINTS"
    echo ""

    echo "### Discovered Auth Endpoints"
    find api/auth -type f -name "*.js" 2>/dev/null | while read file; do
        endpoint=$(basename "$file" .js)
        echo "- \`/api/auth/$endpoint\`"
    done
    echo ""

    # Check for JWT usage
    if grep -r "jsonwebtoken\|jwt" api/auth server.js 2>/dev/null | head -3; then
        echo ""
        echo "**JWT Implementation**: ‚úÖ Detected"
    fi
    echo ""

    # Check for password hashing
    if grep -r "bcrypt\|argon2\|scrypt" api/auth server.js 2>/dev/null | head -3; then
        echo ""
        echo "**Password Hashing**: ‚úÖ Detected"
    else
        echo "**Password Hashing**: ‚ö†Ô∏è Not clearly detected"
    fi
    echo ""

    # Check for OAuth
    if ls api/auth/github.js api/auth/google.js 2>/dev/null; then
        echo "**OAuth Providers**: ‚úÖ GitHub, Google detected"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Authentication endpoints analyzed${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 8: INPUT VALIDATION
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[8/14] ‚úÖ INPUT VALIDATION${NC}"
{
    echo "## 8. INPUT VALIDATION"
    echo ""

    # Check for validation middleware
    if [ -f "api/_middleware/input-validator.js" ]; then
        echo "**Input Validation Middleware**: ‚úÖ Found at \`api/_middleware/input-validator.js\`"
    else
        echo "**Input Validation Middleware**: ‚ö†Ô∏è Not found"
    fi
    echo ""

    # Check for common validation libraries
    echo "### Validation Libraries"
    if grep -r "joi\|express-validator\|yup\|zod" package.json 2>/dev/null; then
        echo "‚úÖ Validation library detected in dependencies"
    else
        echo "‚ö†Ô∏è No validation library found in package.json"
    fi
    echo ""

    # Check for SQL injection protection
    echo "### SQL Injection Protection"
    if grep -r "prepared.*statement\|parameterized\|sequelize\|knex\|prisma" api --include="*.js" 2>/dev/null | head -3; then
        echo "‚úÖ ORM/Parameterized queries detected"
    else
        echo "‚ö†Ô∏è Manual SQL query verification needed"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Input validation checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 9: DATABASE SECURITY
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[9/14] üóÑÔ∏è  DATABASE SECURITY${NC}"
{
    echo "## 9. DATABASE SECURITY"
    echo ""

    # Check database files
    echo "### Database Files"
    ls -lh database/*.db database/*.sqlite* 2>/dev/null || echo "No SQLite databases found"
    echo ""

    # Check for database credentials in code
    echo "### Credential Hardcoding Check"
    if grep -r "mysql://\|postgresql://\|mongodb://" api --include="*.js" 2>/dev/null | grep -v "process.env" | head -3; then
        echo "‚ö†Ô∏è **WARNING**: Hardcoded database connection strings detected"
    else
        echo "‚úÖ No hardcoded database credentials found"
    fi
    echo ""

    # Check for SQL injection vulnerable patterns
    echo "### SQL Injection Risk Patterns"
    SQLI_RISK=$(grep -r "query.*req\\..*+\|query.*\${req" api --include="*.js" 2>/dev/null | wc -l | tr -d ' ')
    if [ "$SQLI_RISK" -gt 0 ]; then
        echo "‚ö†Ô∏è **WARNING**: $SQLI_RISK potential SQL injection points found"
        echo ""
        echo "**Recommendation**: Use parameterized queries or ORMs"
    else
        echo "‚úÖ No obvious SQL injection patterns detected"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Database security checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 10: XSS PROTECTION
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[10/14] üö´ XSS PROTECTION${NC}"
{
    echo "## 10. XSS (Cross-Site Scripting) PROTECTION"
    echo ""

    # Check for innerHTML usage (XSS risk)
    XSS_RISK=$(grep -r "innerHTML\|outerHTML" public/js --include="*.js" 2>/dev/null | grep -v "// " | wc -l | tr -d ' ')

    if [ "$XSS_RISK" -gt 0 ]; then
        echo "**innerHTML Usage**: ‚ö†Ô∏è $XSS_RISK occurrences found"
        echo ""
        echo "**Risk**: innerHTML can execute malicious scripts if user input is not sanitized"
        echo "**Recommendation**: Use textContent or DOMPurify for sanitization"
    else
        echo "**innerHTML Usage**: ‚úÖ No risky innerHTML usage detected"
    fi
    echo ""

    # Check for Content Security Policy
    if grep -r "Content-Security-Policy" server.js security/*.js 2>/dev/null; then
        echo "**CSP Implementation**: ‚úÖ Detected"
    else
        echo "**CSP Implementation**: ‚ö†Ô∏è Not clearly detected"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì XSS protection analyzed${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 11: CSRF PROTECTION
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[11/14] üé≠ CSRF PROTECTION${NC}"
{
    echo "## 11. CSRF (Cross-Site Request Forgery) PROTECTION"
    echo ""

    # Check for CSRF token endpoint
    if [ -f "api/csrf-token.js" ]; then
        echo "**CSRF Token Endpoint**: ‚úÖ Found at \`/api/csrf-token\`"
    else
        echo "**CSRF Token Endpoint**: ‚ö†Ô∏è Not found"
    fi
    echo ""

    # Check for csurf middleware
    if grep -r "csurf\|csrf" package.json server.js middleware/*.js 2>/dev/null | head -5; then
        echo "**CSRF Middleware**: ‚úÖ Detected"
    else
        echo "**CSRF Middleware**: ‚ö†Ô∏è Not detected"
    fi
    echo ""

    # Check for SameSite cookie attribute
    if grep -r "sameSite" server.js security/*.js 2>/dev/null; then
        echo "**SameSite Cookie**: ‚úÖ Configured"
    else
        echo "**SameSite Cookie**: ‚ö†Ô∏è Not explicitly configured"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì CSRF protection checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 12: FILE UPLOAD SECURITY
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[12/14] üìÅ FILE UPLOAD SECURITY${NC}"
{
    echo "## 12. FILE UPLOAD SECURITY"
    echo ""

    # Check for file upload endpoints
    if find api/files -type f -name "upload.js" 2>/dev/null; then
        echo "**Upload Endpoint**: ‚úÖ Found at \`/api/files/upload\`"
        echo ""

        # Check for file validation
        if grep -r "mimetype\|filesize\|whitelist" api/files/upload.js 2>/dev/null; then
            echo "**File Validation**: ‚úÖ Validation logic detected"
        else
            echo "**File Validation**: ‚ö†Ô∏è Validation not clearly detected"
        fi
        echo ""

        # Check for malware scanning
        if grep -r "clamav\|virus\|scan" api/files/upload.js 2>/dev/null; then
            echo "**Malware Scanning**: ‚úÖ Detected"
        else
            echo "**Malware Scanning**: ‚ö†Ô∏è Not detected"
            echo ""
            echo "**Recommendation**: Implement malware scanning for uploaded files"
        fi
    else
        echo "**Upload Endpoint**: ‚ÑπÔ∏è No file upload endpoint found"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì File upload security checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 13: ERROR HANDLING & INFORMATION DISCLOSURE
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[13/14] ‚ö†Ô∏è  ERROR HANDLING${NC}"
{
    echo "## 13. ERROR HANDLING & INFORMATION DISCLOSURE"
    echo ""

    # Check for stack trace exposure
    if grep -r "console.error.*stack\|res.send.*error.stack" api server.js 2>/dev/null | head -5; then
        echo "**Stack Trace Exposure**: ‚ö†Ô∏è Potential information leakage detected"
        echo ""
        echo "**Risk**: Stack traces can reveal sensitive information about system architecture"
        echo "**Recommendation**: Never expose stack traces in production"
    else
        echo "**Stack Trace Exposure**: ‚úÖ No obvious exposure detected"
    fi
    echo ""

    # Check for NODE_ENV check
    if grep -r "NODE_ENV.*production" server.js 2>/dev/null; then
        echo "**Environment Check**: ‚úÖ NODE_ENV checks detected"
    else
        echo "**Environment Check**: ‚ö†Ô∏è No clear NODE_ENV checks found"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Error handling analyzed${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TEST 14: SESSION MANAGEMENT
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo -e "${BLUE}[14/14] üîê SESSION MANAGEMENT${NC}"
{
    echo "## 14. SESSION MANAGEMENT"
    echo ""

    # Check for express-session
    if grep -r "express-session" package.json server.js 2>/dev/null; then
        echo "**Session Middleware**: ‚úÖ express-session detected"
        echo ""

        # Check for secure session config
        if grep -r "secure.*true\|httpOnly.*true" server.js security/*.js 2>/dev/null | grep -i session; then
            echo "**Secure Session Config**: ‚úÖ Secure flags detected"
        else
            echo "**Secure Session Config**: ‚ö†Ô∏è Secure flags not clearly set"
            echo ""
            echo "**Recommendation**: Set secure: true, httpOnly: true, sameSite: 'strict'"
        fi
    else
        echo "**Session Middleware**: ‚ÑπÔ∏è Using JWT or other auth method"
    fi
    echo ""

    # Check for session secret
    if grep -r "session.*secret" server.js 2>/dev/null | grep "process.env"; then
        echo "**Session Secret**: ‚úÖ Using environment variable"
    else
        echo "**Session Secret**: ‚ö†Ô∏è Review secret configuration"
    fi
    echo ""
} >> "$REPORT_FILE"
echo -e "${GREEN}‚úì Session management checked${NC}"

#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# SUMMARY
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo ""
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}                     TEST COMPLETE                          ${NC}"
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""

{
    echo "---"
    echo ""
    echo "## üìä SUMMARY"
    echo ""
    echo "**Penetration Test Completed**: $(date)"
    echo "**Total Tests Run**: 14"
    echo ""
    echo "### Key Findings"
    echo ""
    echo "‚úÖ **PASS**: Tests that passed security checks"
    echo "‚ö†Ô∏è **WARNING**: Areas requiring attention"
    echo "‚ùå **FAIL**: Critical security issues"
    echo ""
    echo "### Recommendations"
    echo ""
    echo "1. Review all ‚ö†Ô∏è WARNING items"
    echo "2. Implement recommendations from each section"
    echo "3. Run regular security audits"
    echo "4. Keep dependencies updated"
    echo "5. Monitor security advisories"
    echo ""
    echo "---"
    echo ""
    echo "**Report Generated**: $(date)"
    echo "**Report File**: $REPORT_FILE"
    echo "**Compliance**: White-Hat Security Audit ‚úÖ"
    echo ""
} >> "$REPORT_FILE"

echo -e "${GREEN}‚úì Full penetration test complete${NC}"
echo -e "${BLUE}üìÑ Report saved to: ${CYAN}$REPORT_FILE${NC}"
echo ""

# Display report summary
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${PURPLE}                  REPORT SUMMARY                           ${NC}"
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
tail -20 "$REPORT_FILE"
echo ""

exit 0

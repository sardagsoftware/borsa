{
  "name": "Ailydian Ultra Pro - Azure SQL Database Migration Plan",
  "description": "Enterprise SQL migration from SQLite to Azure SQL Database with High Availability",
  "version": "1.0.0",
  "migrationStrategy": "Blue-Green Deployment with Zero Downtime",
  "targetDatabase": {
    "service": "Azure SQL Database",
    "tier": "General Purpose",
    "computeTier": "Provisioned",
    "vCores": 4,
    "storage": "500GB",
    "backupRetention": "35 days",
    "geoRedundancy": true,
    "readReplicas": 2,
    "region": "East US",
    "secondaryRegion": "West Europe",
    "serviceLevel": "GP_Gen5_4",
    "maxConnections": 200
  },
  "schemaConversion": {
    "currentSchema": "SQLite",
    "targetSchema": "T-SQL (Azure SQL)",
    "conversionTools": [
      "Azure Database Migration Service (DMS)",
      "SQL Server Migration Assistant (SSMA)",
      "Azure Data Studio"
    ],
    "schemaChanges": [
      {
        "table": "users",
        "changes": [
          "Convert AUTOINCREMENT to IDENTITY(1,1)",
          "Convert TEXT to NVARCHAR(MAX)",
          "Add CLUSTERED INDEX on id",
          "Add NONCLUSTERED INDEX on email, role",
          "Add temporal table for audit history"
        ]
      },
      {
        "table": "api_keys",
        "changes": [
          "Convert BLOB to VARBINARY(MAX)",
          "Add encryption with SYMMETRIC KEY",
          "Add NONCLUSTERED INDEX on user_id, created_at",
          "Add CHECK constraint on expiration_date"
        ]
      },
      {
        "table": "ai_requests",
        "changes": [
          "Partition by created_at (monthly partitions)",
          "Convert JSON to NVARCHAR(MAX) with JSON validation",
          "Add COLUMNSTORE INDEX for analytics",
          "Add computed columns for cost_total"
        ]
      },
      {
        "table": "conversations",
        "changes": [
          "Convert TEXT to NVARCHAR(MAX)",
          "Add FULLTEXT INDEX on messages",
          "Add NONCLUSTERED INDEX on user_id, created_at",
          "Add compression (PAGE compression)"
        ]
      },
      {
        "table": "organizations",
        "changes": [
          "Add UNIQUE constraint on name",
          "Add NONCLUSTERED INDEX on subscription_plan",
          "Add DEFAULT constraint on created_at"
        ]
      }
    ]
  },
  "connectionPooling": {
    "library": "tedious + node-mssql",
    "config": {
      "min": 5,
      "max": 50,
      "idleTimeoutMillis": 30000,
      "connectionTimeoutMillis": 5000,
      "requestTimeout": 15000,
      "retryWrites": true,
      "maxRetries": 3,
      "retryDelayMs": 100,
      "enableArithAbort": true,
      "trustServerCertificate": false,
      "encrypt": true
    }
  },
  "migrationPhases": [
    {
      "phase": 1,
      "name": "Pre-Migration Assessment",
      "duration": "1 week",
      "tasks": [
        {
          "task": "Schema Analysis",
          "description": "Analyze SQLite schema and identify incompatibilities",
          "tool": "Azure Data Studio + SSMA",
          "deliverable": "schema-analysis-report.md"
        },
        {
          "task": "Data Volume Assessment",
          "description": "Calculate total data size and growth rate",
          "queries": [
            "SELECT COUNT(*) FROM users",
            "SELECT COUNT(*) FROM ai_requests",
            "SELECT pg_size_pretty(pg_database_size('ailydian'))"
          ],
          "deliverable": "data-volume-report.json"
        },
        {
          "task": "Performance Baseline",
          "description": "Capture current SQLite performance metrics",
          "metrics": [
            "Query response time (P50, P95, P99)",
            "Write throughput (inserts/sec)",
            "Read throughput (selects/sec)",
            "Concurrent connections"
          ],
          "deliverable": "baseline-performance.json"
        },
        {
          "task": "Application Code Audit",
          "description": "Review all SQL queries in application code",
          "focus": [
            "SQLite-specific functions (e.g., AUTOINCREMENT, || concatenation)",
            "Raw SQL queries vs ORM queries",
            "Transaction patterns",
            "Connection management"
          ],
          "deliverable": "code-audit-report.md"
        }
      ]
    },
    {
      "phase": 2,
      "name": "Schema Migration",
      "duration": "1 week",
      "tasks": [
        {
          "task": "Create Target Schema",
          "description": "Generate T-SQL DDL scripts from SQLite schema",
          "script": "scripts/azure-sql-schema.sql",
          "includes": [
            "Tables with proper data types",
            "Primary keys and foreign keys",
            "Indexes (clustered + nonclustered)",
            "Constraints (CHECK, UNIQUE, DEFAULT)",
            "Triggers (if needed)",
            "Stored procedures",
            "Views"
          ]
        },
        {
          "task": "Provision Azure SQL Database",
          "description": "Create Azure SQL Database with High Availability",
          "azureCLI": [
            "# Create resource group",
            "az group create --name ailydian-ultra-pro-rg --location eastus",
            "",
            "# Create SQL Server",
            "az sql server create --name ailydian-sql-server --resource-group ailydian-ultra-pro-rg --location eastus --admin-user ailydbadmin --admin-password $AZURE_SQL_ADMIN_PASSWORD",
            "",
            "# Configure firewall rules",
            "az sql server firewall-rule create --resource-group ailydian-ultra-pro-rg --server ailydian-sql-server --name AllowAzureServices --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0",
            "",
            "# Create database",
            "az sql db create --resource-group ailydian-ultra-pro-rg --server ailydian-sql-server --name ailydian-production --service-objective GP_Gen5_4 --compute-model Provisioned --max-size 500GB --backup-storage-redundancy Geo",
            "",
            "# Enable Advanced Data Security",
            "az sql db threat-policy update --resource-group ailydian-ultra-pro-rg --server ailydian-sql-server --database ailydian-production --state Enabled --email-account-admins Enabled",
            "",
            "# Enable Auditing",
            "az sql db audit-policy update --resource-group ailydian-ultra-pro-rg --server ailydian-sql-server --database ailydian-production --state Enabled --storage-account ailydianlogs"
          ]
        },
        {
          "task": "Deploy Schema to Azure SQL",
          "description": "Execute DDL scripts on Azure SQL Database",
          "command": "sqlcmd -S ailydian-sql-server.database.windows.net -d ailydian-production -U ailydbadmin -P $AZURE_SQL_ADMIN_PASSWORD -i scripts/azure-sql-schema.sql"
        },
        {
          "task": "Create Migration Tracking Table",
          "description": "Track migration progress and status",
          "schema": {
            "table": "migration_tracking",
            "columns": [
              "id INT IDENTITY(1,1) PRIMARY KEY",
              "table_name NVARCHAR(100) NOT NULL",
              "total_rows INT NOT NULL",
              "migrated_rows INT NOT NULL",
              "status NVARCHAR(20) NOT NULL",
              "start_time DATETIME2 NOT NULL",
              "end_time DATETIME2 NULL",
              "error_message NVARCHAR(MAX) NULL"
            ]
          }
        }
      ]
    },
    {
      "phase": 3,
      "name": "Data Migration",
      "duration": "2-3 days",
      "strategy": "Batch-based incremental migration with checkpoints",
      "tasks": [
        {
          "task": "Historical Data Migration",
          "description": "Migrate all existing data from SQLite to Azure SQL",
          "method": "Azure Database Migration Service (DMS)",
          "steps": [
            "1. Create DMS project in Azure Portal",
            "2. Configure source (SQLite) and target (Azure SQL)",
            "3. Select tables to migrate",
            "4. Start full data load",
            "5. Monitor progress in Azure Portal"
          ],
          "alternative": "Custom Node.js migration script with streaming",
          "batchSize": 10000,
          "script": "scripts/migrate-data.js"
        },
        {
          "task": "Data Validation",
          "description": "Verify row counts and data integrity",
          "checks": [
            "SELECT COUNT(*) comparison between source and target",
            "Checksum validation on critical tables",
            "Foreign key constraint validation",
            "NULL value distribution",
            "Date range validation"
          ],
          "script": "scripts/validate-migration.js"
        },
        {
          "task": "Handle Large BLOBs",
          "description": "Migrate large binary data (API keys, encrypted data)",
          "strategy": "Stream-based migration with Azure Blob Storage fallback",
          "code": "scripts/migrate-blobs.js"
        }
      ]
    },
    {
      "phase": 4,
      "name": "Application Code Migration",
      "duration": "1 week",
      "tasks": [
        {
          "task": "Update Database Driver",
          "description": "Replace SQLite driver with Azure SQL driver",
          "changes": [
            {
              "file": "package.json",
              "remove": ["better-sqlite3"],
              "add": ["mssql@^10.0.0", "tedious@^16.0.0"]
            }
          ]
        },
        {
          "task": "Update Connection Configuration",
          "description": "Create Azure SQL connection module",
          "file": "database/azure-sql-connection.js",
          "config": {
            "server": "ailydian-sql-server.database.windows.net",
            "database": "ailydian-production",
            "user": "${AZURE_SQL_USER}",
            "password": "${AZURE_SQL_PASSWORD}",
            "port": 1433,
            "options": {
              "encrypt": true,
              "trustServerCertificate": false,
              "enableArithAbort": true,
              "requestTimeout": 15000,
              "connectionTimeout": 5000
            },
            "pool": {
              "min": 5,
              "max": 50,
              "idleTimeoutMillis": 30000
            }
          }
        },
        {
          "task": "Convert SQL Queries",
          "description": "Replace SQLite-specific syntax with T-SQL",
          "conversions": [
            {
              "sqlitePattern": "SELECT * FROM users WHERE email LIKE '%' || ? || '%'",
              "tsqlPattern": "SELECT * FROM users WHERE email LIKE '%' + @email + '%'",
              "description": "String concatenation operator"
            },
            {
              "sqlitePattern": "INSERT INTO users (...) VALUES (...); SELECT last_insert_rowid()",
              "tsqlPattern": "INSERT INTO users (...) VALUES (...); SELECT SCOPE_IDENTITY()",
              "description": "Get last inserted ID"
            },
            {
              "sqlitePattern": "datetime('now')",
              "tsqlPattern": "GETUTCDATE()",
              "description": "Current timestamp"
            },
            {
              "sqlitePattern": "AUTOINCREMENT",
              "tsqlPattern": "IDENTITY(1,1)",
              "description": "Auto-incrementing primary key"
            }
          ]
        },
        {
          "task": "Update Database Repositories",
          "description": "Refactor data access layer for Azure SQL",
          "files": [
            "database/repositories/user-repository.js",
            "database/repositories/api-key-repository.js",
            "database/repositories/conversation-repository.js",
            "database/repositories/organization-repository.js"
          ]
        },
        {
          "task": "Implement Read Replicas",
          "description": "Add read replica routing for scalability",
          "strategy": "Route read queries to read replicas, write queries to primary",
          "file": "database/replica-router.js",
          "logic": "if (query.startsWith('SELECT')) use readReplica else use primary"
        }
      ]
    },
    {
      "phase": 5,
      "name": "Testing & Validation",
      "duration": "1 week",
      "tasks": [
        {
          "task": "Unit Tests",
          "description": "Update all database-related unit tests",
          "framework": "Jest",
          "coverage": "Maintain 80%+ test coverage",
          "command": "npm run test:unit"
        },
        {
          "task": "Integration Tests",
          "description": "Test end-to-end flows with Azure SQL",
          "scenarios": [
            "User registration and login",
            "API key creation and validation",
            "AI request processing and storage",
            "Conversation history retrieval",
            "Organization management"
          ],
          "command": "npm run test:integration"
        },
        {
          "task": "Performance Testing",
          "description": "Compare performance against baseline",
          "tool": "k6 load testing",
          "metrics": [
            "Query response time (P50, P95, P99)",
            "Throughput (requests/sec)",
            "Connection pool efficiency",
            "Read replica latency"
          ],
          "script": "tests/performance/azure-sql-load-test.js",
          "targets": {
            "p95_latency": "< 500ms",
            "throughput": "> 1000 req/sec",
            "error_rate": "< 0.1%"
          }
        },
        {
          "task": "Security Testing",
          "description": "Validate encryption and access controls",
          "checks": [
            "TLS encryption verification",
            "SQL injection vulnerability scan",
            "Azure AD authentication test",
            "Row-level security (if implemented)",
            "Audit log verification"
          ]
        }
      ]
    },
    {
      "phase": 6,
      "name": "Blue-Green Deployment",
      "duration": "1 day",
      "strategy": "Zero-downtime cutover with instant rollback capability",
      "tasks": [
        {
          "task": "Deploy to Staging (Blue)",
          "description": "Deploy application with Azure SQL to staging environment",
          "environment": "staging",
          "database": "ailydian-staging",
          "validation": "Run smoke tests and synthetic monitoring"
        },
        {
          "task": "Enable CDC (Change Data Capture)",
          "description": "Capture changes in production SQLite during migration",
          "purpose": "Sync incremental changes to Azure SQL",
          "implementation": "Custom Node.js CDC service or Azure DMS continuous sync"
        },
        {
          "task": "Final Data Sync",
          "description": "Sync last-minute changes from SQLite to Azure SQL",
          "downtime": "< 5 minutes",
          "steps": [
            "1. Enable maintenance mode (read-only)",
            "2. Run final incremental sync",
            "3. Validate row counts",
            "4. Switch DNS/load balancer to new app",
            "5. Disable maintenance mode"
          ]
        },
        {
          "task": "Traffic Cutover",
          "description": "Switch production traffic to Azure SQL application",
          "method": "Load balancer weight adjustment (0% → 100%)",
          "monitoring": "Real-time error rate and latency monitoring"
        },
        {
          "task": "Rollback Plan",
          "description": "Instant rollback to SQLite if issues detected",
          "trigger": "Error rate > 1% OR P95 latency > 2000ms",
          "steps": [
            "1. Switch load balancer back to SQLite app",
            "2. Investigate issues in Azure SQL logs",
            "3. Fix issues in staging",
            "4. Retry cutover"
          ]
        }
      ]
    },
    {
      "phase": 7,
      "name": "Post-Migration Optimization",
      "duration": "Ongoing",
      "tasks": [
        {
          "task": "Index Tuning",
          "description": "Analyze query execution plans and add missing indexes",
          "tool": "Azure SQL Database Advisor",
          "queries": [
            "SELECT * FROM sys.dm_db_missing_index_details",
            "SELECT * FROM sys.dm_db_index_usage_stats"
          ]
        },
        {
          "task": "Query Performance Tuning",
          "description": "Optimize slow queries identified in production",
          "tool": "Query Performance Insight",
          "techniques": [
            "Add covering indexes",
            "Rewrite N+1 queries with JOINs",
            "Add query hints (NOLOCK, FORCESEEK)",
            "Implement query result caching"
          ]
        },
        {
          "task": "Configure Auto-Scaling",
          "description": "Enable automatic scaling based on DTU usage",
          "azureCLI": "az sql db update --resource-group ailydian-ultra-pro-rg --server ailydian-sql-server --name ailydian-production --auto-pause-delay 60 --min-capacity 1"
        },
        {
          "task": "Set Up Alerting",
          "description": "Create Azure Monitor alerts for database metrics",
          "alerts": [
            "CPU usage > 80% for 5 minutes",
            "DTU usage > 90% for 5 minutes",
            "Storage usage > 90%",
            "Failed connections > 10/min",
            "Deadlocks detected",
            "Long-running queries > 30 seconds"
          ]
        }
      ]
    }
  ],
  "backupStrategy": {
    "automatedBackups": {
      "enabled": true,
      "retentionPeriod": "35 days",
      "frequency": "Every 5-10 minutes (transaction log)",
      "fullBackupFrequency": "Weekly",
      "differentialBackupFrequency": "Every 12 hours",
      "pointInTimeRestore": true,
      "geoRedundancy": true
    },
    "longTermRetention": {
      "enabled": true,
      "weeklyBackup": "Keep for 12 weeks",
      "monthlyBackup": "Keep for 12 months",
      "yearlyBackup": "Keep for 5 years"
    }
  },
  "disasterRecovery": {
    "geoReplication": {
      "enabled": true,
      "primaryRegion": "East US",
      "secondaryRegion": "West Europe",
      "failoverPolicy": "Automatic",
      "rpo": "< 5 seconds",
      "rto": "< 30 seconds"
    },
    "failoverTesting": {
      "frequency": "Quarterly",
      "steps": [
        "1. Initiate planned failover to secondary region",
        "2. Verify application connectivity",
        "3. Run smoke tests",
        "4. Fail back to primary region"
      ]
    }
  },
  "costEstimation": {
    "monthly": {
      "databaseCompute": "$730/month (GP_Gen5_4 vCores)",
      "storage": "$120/month (500GB @ $0.24/GB)",
      "backupStorage": "$50/month (Geo-redundant)",
      "dataTransfer": "$20/month (Estimated)",
      "advancedDataSecurity": "$15/month",
      "total": "$935/month"
    },
    "optimization": [
      "Use Reserved Capacity for 1-year commitment (-40% cost)",
      "Enable Auto-Pause for dev/staging environments",
      "Archive old data to Azure Blob Storage",
      "Use read replicas only during peak hours"
    ]
  },
  "environmentVariables": {
    "AZURE_SQL_SERVER": "ailydian-sql-server.database.windows.net",
    "AZURE_SQL_DATABASE": "ailydian-production",
    "AZURE_SQL_USER": "${AZURE_SQL_USER}",
    "AZURE_SQL_PASSWORD": "${AZURE_SQL_PASSWORD}",
    "AZURE_SQL_PORT": "1433",
    "AZURE_SQL_ENCRYPT": "true",
    "AZURE_SQL_TRUST_SERVER_CERTIFICATE": "false",
    "AZURE_SQL_POOL_MIN": "5",
    "AZURE_SQL_POOL_MAX": "50",
    "AZURE_SQL_CONNECTION_TIMEOUT": "5000",
    "AZURE_SQL_REQUEST_TIMEOUT": "15000",
    "AZURE_SQL_READ_REPLICA_1": "ailydian-sql-server-replica1.database.windows.net",
    "AZURE_SQL_READ_REPLICA_2": "ailydian-sql-server-replica2.database.windows.net"
  },
  "migrationScripts": {
    "schemaGeneration": "scripts/generate-azure-sql-schema.js",
    "dataMigration": "scripts/migrate-data.js",
    "validation": "scripts/validate-migration.js",
    "rollback": "scripts/rollback-to-sqlite.js"
  },
  "documentation": [
    "docs/azure-sql-migration-guide.md",
    "docs/azure-sql-connection-guide.md",
    "docs/azure-sql-performance-tuning.md",
    "docs/azure-sql-disaster-recovery.md"
  ],
  "notes": "This migration plan provides enterprise-grade SQL capabilities with High Availability, Geo-Replication, and zero downtime. Total migration time: 3-4 weeks with proper testing."
}

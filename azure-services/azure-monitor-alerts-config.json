{
  "description": "Azure Monitor Alert Rules Configuration for Ailydian Ultra Pro",
  "resourceGroup": "ailydian-ultra-pro-rg",
  "applicationInsightsName": "ailydian-insights",
  "actionGroups": [
    {
      "name": "ailydian-critical-alerts",
      "shortName": "CRIT-ALERT",
      "enabled": true,
      "emailReceivers": [
        {
          "name": "Emrah Sardag - Primary",
          "emailAddress": "contact@ailydian.com",
          "useCommonAlertSchema": true
        }
      ],
      "smsReceivers": [],
      "webhookReceivers": [
        {
          "name": "Slack Webhook",
          "serviceUri": "https://hooks.slack.com/services/YOUR_WEBHOOK_URL",
          "useCommonAlertSchema": true
        }
      ],
      "azureFunctionReceivers": []
    },
    {
      "name": "ailydian-warning-alerts",
      "shortName": "WARN",
      "enabled": true,
      "emailReceivers": [
        {
          "name": "Emrah Sardag - Secondary",
          "emailAddress": "contact@ailydian.com",
          "useCommonAlertSchema": true
        }
      ]
    }
  ],
  "alertRules": [
    {
      "name": "ailydian-5xx-error-rate-critical",
      "description": "Alert when 5xx error rate exceeds 5% of total requests",
      "severity": 0,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | where resultCode startswith '5' | summarize Count5xx=count() by bin(timestamp, 1m) | join kind=inner (requests | summarize TotalRequests=count() by bin(timestamp, 1m)) on timestamp | extend ErrorRate = (Count5xx * 100.0) / TotalRequests | where ErrorRate > 5",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 5,
            "metricMeasureColumn": "ErrorRate"
          }
        ]
      },
      "autoMitigate": true,
      "description_details": "Triggers when 5xx errors exceed 5% of total requests in a 5-minute window"
    },
    {
      "name": "ailydian-5xx-error-rate-warning",
      "description": "Warning when 5xx error rate exceeds 2% of total requests",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | where resultCode startswith '5' | summarize Count5xx=count() by bin(timestamp, 1m) | join kind=inner (requests | summarize TotalRequests=count() by bin(timestamp, 1m)) on timestamp | extend ErrorRate = (Count5xx * 100.0) / TotalRequests | where ErrorRate > 2 and ErrorRate <= 5",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 2,
            "metricMeasureColumn": "ErrorRate"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-p95-latency-critical",
      "description": "Alert when P95 response time exceeds 2000ms",
      "severity": 0,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | summarize P95Latency=percentile(duration, 95) by bin(timestamp, 1m) | where P95Latency > 2000",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 2000,
            "metricMeasureColumn": "P95Latency"
          }
        ]
      },
      "autoMitigate": true,
      "description_details": "Triggers when 95th percentile of response time exceeds 2 seconds"
    },
    {
      "name": "ailydian-p95-latency-warning",
      "description": "Warning when P95 response time exceeds 1000ms",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | summarize P95Latency=percentile(duration, 95) by bin(timestamp, 1m) | where P95Latency > 1000 and P95Latency <= 2000",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 1000,
            "metricMeasureColumn": "P95Latency"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-p99-latency-critical",
      "description": "Alert when P99 response time exceeds 5000ms",
      "severity": 0,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | summarize P99Latency=percentile(duration, 99) by bin(timestamp, 1m) | where P99Latency > 5000",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 5000,
            "metricMeasureColumn": "P99Latency"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-error-budget-exhausted",
      "description": "Error Budget: Alert when monthly error rate exceeds 0.1% (99.9% SLO)",
      "severity": 1,
      "enabled": true,
      "evaluationFrequency": "PT5M",
      "windowSize": "PT30M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | where timestamp > ago(30d) | summarize TotalRequests=count(), FailedRequests=countif(success == false) | extend ErrorRate = (FailedRequests * 100.0) / TotalRequests | extend ErrorBudgetRemaining = 0.1 - ErrorRate | where ErrorBudgetRemaining < 0",
            "timeAggregation": "Average",
            "operator": "LessThan",
            "threshold": 0,
            "metricMeasureColumn": "ErrorBudgetRemaining"
          }
        ]
      },
      "autoMitigate": false,
      "description_details": "Triggers when error rate exceeds 99.9% SLO (0.1% error budget)"
    },
    {
      "name": "ailydian-error-budget-warning",
      "description": "Error Budget Warning: Alert when 80% of monthly error budget is consumed",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT5M",
      "windowSize": "PT30M",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | where timestamp > ago(30d) | summarize TotalRequests=count(), FailedRequests=countif(success == false) | extend ErrorRate = (FailedRequests * 100.0) / TotalRequests | extend ErrorBudgetConsumed = (ErrorRate / 0.1) * 100 | where ErrorBudgetConsumed > 80 and ErrorBudgetConsumed <= 100",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 80,
            "metricMeasureColumn": "ErrorBudgetConsumed"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-availability-drop",
      "description": "Alert when availability drops below 99.5% in the last hour",
      "severity": 1,
      "enabled": true,
      "evaluationFrequency": "PT5M",
      "windowSize": "PT1H",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | summarize TotalRequests=count(), SuccessfulRequests=countif(success == true) | extend Availability = (SuccessfulRequests * 100.0) / TotalRequests | where Availability < 99.5",
            "timeAggregation": "Average",
            "operator": "LessThan",
            "threshold": 99.5,
            "metricMeasureColumn": "Availability"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-high-exception-rate",
      "description": "Alert when exception rate exceeds 10 exceptions per minute",
      "severity": 1,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "exceptions | summarize ExceptionCount=count() by bin(timestamp, 1m) | where ExceptionCount > 10",
            "timeAggregation": "Total",
            "operator": "GreaterThan",
            "threshold": 10,
            "metricMeasureColumn": "ExceptionCount"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-dependency-failure-rate",
      "description": "Alert when external dependency failure rate exceeds 5%",
      "severity": 1,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-critical-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "dependencies | summarize TotalCalls=count(), FailedCalls=countif(success == false) by name | extend FailureRate = (FailedCalls * 100.0) / TotalCalls | where FailureRate > 5",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 5,
            "metricMeasureColumn": "FailureRate"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-memory-usage-high",
      "description": "Alert when memory usage exceeds 85% for 5 minutes",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "performanceCounters | where name == 'Memory' | summarize MemoryUsage=avg(value) | where MemoryUsage > 85",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 85,
            "metricMeasureColumn": "MemoryUsage"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-cpu-usage-high",
      "description": "Alert when CPU usage exceeds 80% for 5 minutes",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT1M",
      "windowSize": "PT5M",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "performanceCounters | where name == 'CPU' | summarize CPUUsage=avg(value) | where CPUUsage > 80",
            "timeAggregation": "Average",
            "operator": "GreaterThan",
            "threshold": 80,
            "metricMeasureColumn": "CPUUsage"
          }
        ]
      },
      "autoMitigate": true
    },
    {
      "name": "ailydian-request-rate-anomaly",
      "description": "Alert on anomalous request rate (ML-based)",
      "severity": 2,
      "enabled": true,
      "evaluationFrequency": "PT5M",
      "windowSize": "PT1H",
      "actionGroupName": "ailydian-warning-alerts",
      "criteria": {
        "allOf": [
          {
            "query": "requests | make-series RequestRate=count() default=0 on timestamp from ago(7d) to now() step 1h | extend Anomalies=series_decompose_anomalies(RequestRate, 1.5) | mv-expand timestamp to typeof(datetime), RequestRate to typeof(double), Anomalies to typeof(double) | where Anomalies != 0",
            "timeAggregation": "Total",
            "operator": "GreaterThan",
            "threshold": 0,
            "metricMeasureColumn": "Anomalies"
          }
        ]
      },
      "autoMitigate": true,
      "description_details": "Uses time-series anomaly detection to identify unusual request patterns"
    }
  ],
  "slo_objectives": {
    "availability_slo": {
      "target": 99.9,
      "error_budget_percentage": 0.1,
      "measurement_window": "30d"
    },
    "latency_slo": {
      "p95_target_ms": 1000,
      "p99_target_ms": 5000,
      "measurement_window": "30d"
    },
    "error_rate_slo": {
      "target_percentage": 0.1,
      "measurement_window": "30d"
    }
  },
  "deployment_instructions": {
    "azure_cli": [
      "# 1. Create Action Groups",
      "az monitor action-group create --name ailydian-critical-alerts --short-name CRIT-ALERT --resource-group ailydian-ultra-pro-rg --email-receiver name='Emrah Sardag' email-address='contact@ailydian.com'",
      "",
      "# 2. Create Alert Rules (example for 5xx error rate)",
      "az monitor scheduled-query create --name ailydian-5xx-error-rate-critical --resource-group ailydian-ultra-pro-rg --scopes /subscriptions/{subscription-id}/resourceGroups/ailydian-ultra-pro-rg/providers/microsoft.insights/components/ailydian-insights --condition \"count 'Kusto Query' > 5\" --evaluation-frequency PT1M --window-size PT5M --severity 0 --action ailydian-critical-alerts",
      "",
      "# 3. Verify Alert Rules",
      "az monitor scheduled-query list --resource-group ailydian-ultra-pro-rg"
    ],
    "azure_portal": [
      "1. Navigate to Azure Portal > Monitor > Alerts",
      "2. Click 'Create' > 'Alert rule'",
      "3. Select Application Insights resource: ailydian-insights",
      "4. Add condition: Custom log search",
      "5. Paste Kusto query from alert rules above",
      "6. Set threshold and evaluation frequency",
      "7. Add action group: ailydian-critical-alerts",
      "8. Name the alert rule and save"
    ],
    "terraform": [
      "# Create azurerm_monitor_scheduled_query_rules_alert resources",
      "# Use the configuration above as input"
    ]
  },
  "notes": "These alert rules follow SRE best practices with error budgets, SLOs, and automated anomaly detection. Adjust thresholds based on production baseline."
}

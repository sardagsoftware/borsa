{
  "name": "Ailydian Ultra Pro - Azure Cache for Redis Configuration",
  "description": "Enterprise-grade distributed caching with Redis for performance optimization",
  "version": "1.0.0",
  "serviceName": "Azure Cache for Redis",
  "tier": "Premium",
  "skuFamily": "P",
  "skuCapacity": 1,
  "redisConfiguration": {
    "maxmemory-policy": "allkeys-lru",
    "maxmemory-reserved": "50",
    "maxfragmentationmemory-reserved": "50",
    "notify-keyspace-events": "Ex",
    "aof-backup-enabled": "true",
    "aof-storage-connection-string": "${AZURE_STORAGE_CONNECTION_STRING}",
    "rdb-backup-enabled": "true",
    "rdb-backup-frequency": "60",
    "rdb-storage-connection-string": "${AZURE_STORAGE_CONNECTION_STRING}"
  },
  "clusterConfig": {
    "enabled": true,
    "shardCount": 3,
    "replicasPerPrimary": 1,
    "zones": ["1", "2", "3"]
  },
  "networking": {
    "publicNetworkAccess": "Disabled",
    "privateEndpoint": {
      "enabled": true,
      "subnetId": "/subscriptions/{subscription-id}/resourceGroups/ailydian-ultra-pro-rg/providers/Microsoft.Network/virtualNetworks/ailydian-vnet/subnets/redis-subnet"
    },
    "firewallRules": [
      {
        "name": "AllowAppServiceSubnet",
        "startIP": "10.0.1.0",
        "endIP": "10.0.1.255"
      }
    ]
  },
  "cachingStrategies": {
    "strategies": [
      {
        "name": "Cache-Aside (Lazy Loading)",
        "description": "Application checks cache first, loads from DB on miss, then caches result",
        "use_cases": [
          "User profile data",
          "AI model configurations",
          "Organization settings",
          "API key metadata"
        ],
        "ttl": "3600 seconds (1 hour)",
        "pattern": "Check cache → If miss → Load from DB → Write to cache → Return data"
      },
      {
        "name": "Write-Through",
        "description": "Application writes to cache and DB simultaneously",
        "use_cases": [
          "User authentication tokens",
          "Session data",
          "Real-time counters"
        ],
        "ttl": "1800 seconds (30 minutes)",
        "pattern": "Write to cache → Write to DB → Return success"
      },
      {
        "name": "Write-Behind (Write-Back)",
        "description": "Application writes to cache immediately, DB write happens asynchronously",
        "use_cases": [
          "Analytics events",
          "AI request logs (batch inserts)",
          "Metrics aggregation"
        ],
        "ttl": "300 seconds (5 minutes)",
        "pattern": "Write to cache → Queue DB write → Background worker writes to DB"
      },
      {
        "name": "Read-Through",
        "description": "Cache automatically loads data from DB on cache miss",
        "use_cases": [
          "API response caching",
          "Static content",
          "Configuration data"
        ],
        "ttl": "7200 seconds (2 hours)",
        "pattern": "Check cache → If miss → Cache loader fetches from DB → Return data"
      }
    ]
  },
  "cacheKeys": {
    "patterns": [
      {
        "key": "user:{userId}",
        "description": "User profile data",
        "ttl": 3600,
        "strategy": "Cache-Aside"
      },
      {
        "key": "user:{userId}:apikeys",
        "description": "User's API keys list",
        "ttl": 1800,
        "strategy": "Cache-Aside"
      },
      {
        "key": "apikey:{keyId}",
        "description": "API key metadata",
        "ttl": 3600,
        "strategy": "Cache-Aside"
      },
      {
        "key": "session:{sessionId}",
        "description": "User session data",
        "ttl": 1800,
        "strategy": "Write-Through"
      },
      {
        "key": "org:{orgId}",
        "description": "Organization settings",
        "ttl": 7200,
        "strategy": "Cache-Aside"
      },
      {
        "key": "ai:config:{provider}",
        "description": "AI provider configuration",
        "ttl": 86400,
        "strategy": "Read-Through"
      },
      {
        "key": "ai:model:{modelId}",
        "description": "AI model metadata",
        "ttl": 43200,
        "strategy": "Read-Through"
      },
      {
        "key": "rate-limit:{userId}:{endpoint}",
        "description": "Rate limiting counter",
        "ttl": 60,
        "strategy": "Write-Through"
      },
      {
        "key": "conversation:{conversationId}",
        "description": "Conversation history",
        "ttl": 3600,
        "strategy": "Cache-Aside"
      },
      {
        "key": "analytics:daily:{date}",
        "description": "Daily analytics aggregation",
        "ttl": 86400,
        "strategy": "Write-Behind"
      }
    ],
    "namespaces": {
      "user": "User-related data",
      "apikey": "API key data",
      "session": "Session data",
      "org": "Organization data",
      "ai": "AI configuration and models",
      "rate-limit": "Rate limiting counters",
      "conversation": "Chat conversations",
      "analytics": "Analytics and metrics"
    }
  },
  "dataTypes": {
    "string": {
      "commands": ["GET", "SET", "SETEX", "SETNX", "DEL"],
      "use_cases": ["User profiles (JSON)", "API keys", "Tokens"]
    },
    "hash": {
      "commands": ["HGET", "HSET", "HMGET", "HMSET", "HGETALL", "HDEL"],
      "use_cases": ["User settings", "Organization config", "Session attributes"]
    },
    "list": {
      "commands": ["LPUSH", "RPUSH", "LPOP", "RPOP", "LRANGE", "LLEN"],
      "use_cases": ["Recent conversations", "Activity logs", "Job queues"]
    },
    "set": {
      "commands": ["SADD", "SREM", "SMEMBERS", "SISMEMBER", "SCARD"],
      "use_cases": ["User roles", "Feature flags", "Active sessions"]
    },
    "sorted_set": {
      "commands": ["ZADD", "ZREM", "ZRANGE", "ZRANGEBYSCORE", "ZCARD"],
      "use_cases": ["Leaderboards", "Time-series data", "Priority queues"]
    }
  },
  "performanceOptimizations": [
    {
      "technique": "Pipeline Batching",
      "description": "Send multiple commands in a single network round-trip",
      "impact": "Reduce latency by 80% for bulk operations",
      "implementation": "Use ioredis pipeline() method"
    },
    {
      "technique": "Connection Pooling",
      "description": "Maintain a pool of persistent Redis connections",
      "impact": "Eliminate connection overhead (10-50ms per connection)",
      "config": {
        "min": 5,
        "max": 50,
        "idleTimeoutMillis": 30000
      }
    },
    {
      "technique": "Key Compression",
      "description": "Compress large JSON objects before caching",
      "impact": "Reduce memory usage by 60-80%",
      "library": "zlib (gzip)"
    },
    {
      "technique": "TTL Optimization",
      "description": "Set appropriate TTL based on data volatility",
      "impact": "Reduce cache misses and improve hit rate",
      "guidelines": {
        "static_data": "24 hours",
        "user_profile": "1 hour",
        "session_data": "30 minutes",
        "real_time_counters": "1 minute"
      }
    },
    {
      "technique": "Cache Warming",
      "description": "Pre-populate cache with frequently accessed data",
      "impact": "Eliminate cold start latency",
      "schedule": "On application startup and every 6 hours"
    }
  ],
  "monitoring": {
    "metrics": [
      {
        "name": "Cache Hit Rate",
        "formula": "hits / (hits + misses) * 100",
        "target": "> 90%",
        "alert": "< 80%"
      },
      {
        "name": "Average Latency",
        "unit": "milliseconds",
        "target": "< 5ms",
        "alert": "> 10ms"
      },
      {
        "name": "Memory Usage",
        "unit": "percentage",
        "target": "< 80%",
        "alert": "> 90%"
      },
      {
        "name": "Eviction Rate",
        "unit": "keys/sec",
        "target": "< 10 keys/sec",
        "alert": "> 100 keys/sec"
      },
      {
        "name": "Connected Clients",
        "target": "< 100",
        "alert": "> 200"
      }
    ],
    "azureMonitorIntegration": {
      "enabled": true,
      "diagnosticSettings": {
        "logs": ["ConnectedClientList", "AllMetrics"],
        "workspace": "ailydian-log-analytics"
      }
    }
  },
  "deployment": {
    "azureCLI": [
      "# 1. Create Redis Cache",
      "az redis create --resource-group ailydian-ultra-pro-rg --name ailydian-redis --location eastus --sku Premium --vm-size P1 --enable-non-ssl-port false --minimum-tls-version 1.2 --shard-count 3 --replicas-per-primary 1",
      "",
      "# 2. Configure Redis settings",
      "az redis update --resource-group ailydian-ultra-pro-rg --name ailydian-redis --set redisConfiguration.maxmemory-policy=allkeys-lru",
      "",
      "# 3. Enable diagnostics",
      "az monitor diagnostic-settings create --resource /subscriptions/{subscription-id}/resourceGroups/ailydian-ultra-pro-rg/providers/Microsoft.Cache/Redis/ailydian-redis --name redis-diagnostics --workspace ailydian-log-analytics --logs '[{\"category\": \"ConnectedClientList\", \"enabled\": true}]' --metrics '[{\"category\": \"AllMetrics\", \"enabled\": true}]'",
      "",
      "# 4. Create private endpoint",
      "az network private-endpoint create --resource-group ailydian-ultra-pro-rg --name ailydian-redis-pe --vnet-name ailydian-vnet --subnet redis-subnet --private-connection-resource-id /subscriptions/{subscription-id}/resourceGroups/ailydian-ultra-pro-rg/providers/Microsoft.Cache/Redis/ailydian-redis --group-id redisCache --connection-name ailydian-redis-connection",
      "",
      "# 5. Get connection string",
      "az redis list-keys --resource-group ailydian-ultra-pro-rg --name ailydian-redis"
    ],
    "terraform": "# Use azurerm_redis_cache resource with Premium tier configuration"
  },
  "environmentVariables": {
    "REDIS_HOST": "ailydian-redis.redis.cache.windows.net",
    "REDIS_PORT": "6380",
    "REDIS_PASSWORD": "${AZURE_REDIS_PRIMARY_KEY}",
    "REDIS_TLS": "true",
    "REDIS_DB": "0",
    "REDIS_KEY_PREFIX": "ailydian:",
    "REDIS_POOL_MIN": "5",
    "REDIS_POOL_MAX": "50",
    "REDIS_CONNECT_TIMEOUT": "5000",
    "REDIS_COMMAND_TIMEOUT": "3000",
    "REDIS_RETRY_STRATEGY": "exponential_backoff"
  },
  "costEstimation": {
    "monthly": {
      "P1_Premium": "$252/month (6GB cache, 3 shards, 1 replica per shard)",
      "dataTransfer": "$10/month (Estimated)",
      "backup": "$5/month (RDB + AOF backups)",
      "total": "$267/month"
    },
    "optimization": [
      "Use Reserved Capacity for 1-year commitment (-30% cost)",
      "Enable data persistence only for critical data",
      "Use Basic/Standard tier for dev/staging ($15-$75/month)"
    ]
  },
  "securityFeatures": [
    {
      "feature": "TLS 1.2 Encryption",
      "description": "All data in transit is encrypted",
      "enabled": true
    },
    {
      "feature": "Azure Private Link",
      "description": "Redis accessible only via private endpoint",
      "enabled": true
    },
    {
      "feature": "Access Key Rotation",
      "description": "Regular rotation of Redis access keys",
      "schedule": "Every 90 days"
    },
    {
      "feature": "Azure AD Integration",
      "description": "Use Azure AD for authentication (preview)",
      "enabled": false
    },
    {
      "feature": "Data Persistence",
      "description": "RDB + AOF backup for disaster recovery",
      "enabled": true
    }
  ],
  "notes": "Azure Cache for Redis provides enterprise-grade caching with 99.9% SLA, automatic failover, and data persistence."
}

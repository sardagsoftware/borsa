{
  "name": "Ailydian Ultra Pro - Azure SignalR Service Configuration",
  "description": "Real-time WebSocket communication for live chat, AI streaming, presence detection, and notifications",
  "version": "1.0.0",
  "signalRService": {
    "name": "ailydian-signalr",
    "sku": "Standard_S1",
    "tier": "Standard",
    "capacity": 1,
    "resourceGroup": "ailydian-ultra-pro-rg",
    "location": "eastus",
    "features": {
      "serviceMode": "Default",
      "enableConnectivityLogs": true,
      "enableMessagingLogs": true,
      "enableLiveTrace": true
    }
  },
  "pricing": {
    "tier": "Standard_S1",
    "unitPrice": "$49.95/month",
    "includedMessages": "1M messages/day",
    "includedConnections": "1000 concurrent",
    "additionalConnections": "$0.09/1000/day",
    "additionalMessages": "$0.90/1M messages",
    "estimatedMonthlyCost": "$49.95",
    "notes": "Free tier available: 20 concurrent connections, 20K messages/day"
  },
  "serviceMode": {
    "mode": "Default",
    "description": "SignalR Service acts as a proxy between clients and server",
    "alternatives": [
      {
        "mode": "Serverless",
        "description": "No app server needed, use Azure Functions",
        "useCases": ["Event-driven architectures", "Low-traffic apps"]
      },
      {
        "mode": "Classic",
        "description": "Self-hosted SignalR with Azure as backup",
        "useCases": ["Migration scenarios", "Hybrid deployments"]
      }
    ]
  },
  "hubs": [
    {
      "name": "chatHub",
      "path": "/hubs/chat",
      "description": "Real-time chat messaging",
      "methods": {
        "client": [
          "ReceiveMessage",
          "UserJoined",
          "UserLeft",
          "TypingStarted",
          "TypingStopped",
          "MessageEdited",
          "MessageDeleted",
          "ConversationUpdated"
        ],
        "server": [
          "SendMessage",
          "JoinConversation",
          "LeaveConversation",
          "StartTyping",
          "StopTyping",
          "EditMessage",
          "DeleteMessage",
          "MarkAsRead"
        ]
      },
      "authentication": {
        "required": true,
        "methods": ["JWT", "Azure AD B2C"]
      }
    },
    {
      "name": "aiStreamHub",
      "path": "/hubs/ai-stream",
      "description": "Live AI response streaming",
      "methods": {
        "client": [
          "ReceiveAIChunk",
          "AIStreamStarted",
          "AIStreamCompleted",
          "AIStreamError",
          "TokenCountUpdate"
        ],
        "server": [
          "StreamAIResponse",
          "CancelStream",
          "RegenerateResponse"
        ]
      },
      "features": {
        "streaming": true,
        "chunking": true,
        "maxChunkSize": "1KB",
        "streamTimeout": "30s"
      }
    },
    {
      "name": "presenceHub",
      "path": "/hubs/presence",
      "description": "User presence and status tracking",
      "methods": {
        "client": [
          "UserOnline",
          "UserOffline",
          "UserStatusChanged",
          "UserActivityUpdate",
          "OnlineUsersUpdated"
        ],
        "server": [
          "UpdateStatus",
          "GetOnlineUsers",
          "SendHeartbeat"
        ]
      },
      "presence": {
        "heartbeatInterval": "30s",
        "offlineTimeout": "60s",
        "statusOptions": ["online", "away", "busy", "offline"]
      }
    },
    {
      "name": "notificationHub",
      "path": "/hubs/notifications",
      "description": "Real-time notifications",
      "methods": {
        "client": [
          "ReceiveNotification",
          "NotificationRead",
          "NotificationDeleted",
          "BulkNotificationsUpdate"
        ],
        "server": [
          "SubscribeToNotifications",
          "UnsubscribeFromNotifications",
          "MarkNotificationAsRead",
          "DeleteNotification"
        ]
      },
      "notificationTypes": [
        "message",
        "mention",
        "reaction",
        "system",
        "announcement",
        "warning",
        "error"
      ]
    }
  ],
  "connectionString": {
    "format": "Endpoint=https://{serviceName}.service.signalr.net;AccessKey={accessKey};Version=1.0;",
    "example": "Endpoint=https://ailydian-signalr.service.signalr.net;AccessKey=***;Version=1.0;",
    "environmentVariable": "AZURE_SIGNALR_CONNECTION_STRING"
  },
  "cors": {
    "enabled": true,
    "allowedOrigins": [
      "https://ailydian.com",
      "https://www.ailydian.com",
      "https://cdn.ailydian.com",
      "http://localhost:3100",
      "http://localhost:5001"
    ],
    "allowedMethods": ["GET", "POST", "OPTIONS"],
    "allowCredentials": true
  },
  "scaling": {
    "autoScale": {
      "enabled": true,
      "minUnits": 1,
      "maxUnits": 10,
      "rules": [
        {
          "metric": "ConnectionCount",
          "threshold": 800,
          "scaleUpUnits": 1,
          "cooldown": "PT5M"
        },
        {
          "metric": "MessageCount",
          "threshold": 900000,
          "scaleUpUnits": 1,
          "cooldown": "PT5M"
        },
        {
          "metric": "ConnectionCount",
          "threshold": 200,
          "scaleDownUnits": 1,
          "cooldown": "PT10M"
        }
      ]
    },
    "capacity": {
      "unit1": {
        "connections": 1000,
        "messages": "1M/day"
      },
      "unit10": {
        "connections": 10000,
        "messages": "10M/day"
      },
      "unit100": {
        "connections": 100000,
        "messages": "100M/day"
      }
    }
  },
  "security": {
    "authentication": {
      "enabled": true,
      "tokenValidation": {
        "validateIssuer": true,
        "validateAudience": true,
        "validateLifetime": true,
        "clockSkew": "PT5M"
      },
      "accessTokenFactory": "async (context) => generateJWT(context.userId)"
    },
    "authorization": {
      "enabled": true,
      "policies": [
        {
          "name": "ChatAccess",
          "requirement": "Authenticated user with chat permission"
        },
        {
          "name": "AIStreamAccess",
          "requirement": "Premium subscription or trial active"
        },
        {
          "name": "AdminOnly",
          "requirement": "User role contains 'admin'"
        }
      ]
    },
    "rateLimiting": {
      "enabled": true,
      "limits": [
        {
          "type": "connection",
          "limit": 10,
          "window": "PT1M",
          "description": "Max 10 new connections per minute per IP"
        },
        {
          "type": "message",
          "limit": 100,
          "window": "PT1M",
          "description": "Max 100 messages per minute per user"
        }
      ]
    },
    "encryption": {
      "inTransit": {
        "enabled": true,
        "protocol": "TLS 1.2+",
        "cipherSuites": "Strong ciphers only"
      },
      "atRest": {
        "enabled": true,
        "method": "Azure Storage Service Encryption (SSE)"
      }
    }
  },
  "reliability": {
    "reconnection": {
      "enabled": true,
      "retryPolicy": {
        "maxRetries": 5,
        "delays": ["0s", "2s", "10s", "30s", "60s"],
        "strategy": "exponential"
      }
    },
    "keepAlive": {
      "interval": "15s",
      "timeout": "20s"
    },
    "messageDelivery": {
      "guarantees": "At-least-once",
      "ackTimeout": "30s",
      "retryOnFailure": true
    }
  },
  "monitoring": {
    "metrics": [
      {
        "name": "ConnectionCount",
        "description": "Number of active connections",
        "threshold": {
          "warning": 800,
          "critical": 950
        }
      },
      {
        "name": "MessageCount",
        "description": "Messages sent per day",
        "threshold": {
          "warning": 900000,
          "critical": 1000000
        }
      },
      {
        "name": "ConnectionOpenCount",
        "description": "New connections per minute"
      },
      {
        "name": "ConnectionCloseCount",
        "description": "Closed connections per minute"
      },
      {
        "name": "ErrorCount",
        "description": "Errors per minute",
        "threshold": {
          "warning": 10,
          "critical": 50
        }
      },
      {
        "name": "ServerLoad",
        "description": "CPU and memory usage",
        "threshold": {
          "warning": 70,
          "critical": 90
        }
      }
    ],
    "diagnostics": {
      "enabled": true,
      "logs": [
        {
          "category": "AllLogs",
          "enabled": true,
          "retentionDays": 30
        },
        {
          "category": "ConnectivityLogs",
          "enabled": true,
          "retentionDays": 7
        },
        {
          "category": "MessagingLogs",
          "enabled": true,
          "retentionDays": 7
        }
      ],
      "destination": {
        "logAnalyticsWorkspace": "ailydian-logs",
        "storageAccount": "ailydiandiagnostics"
      }
    },
    "alerts": [
      {
        "name": "HighConnectionCount",
        "condition": "ConnectionCount > 800",
        "severity": "Warning",
        "action": "Email to ops team"
      },
      {
        "name": "MessageLimitReached",
        "condition": "MessageCount > 900000",
        "severity": "Critical",
        "action": "Email + SMS to ops team"
      },
      {
        "name": "HighErrorRate",
        "condition": "ErrorCount > 50 per minute",
        "severity": "Critical",
        "action": "PagerDuty alert"
      }
    ]
  },
  "features": {
    "messageRetention": {
      "enabled": false,
      "duration": "0",
      "notes": "SignalR does not persist messages - use Redis or CosmosDB for history"
    },
    "messageOrdering": {
      "enabled": true,
      "guarantees": "Per-connection ordering guaranteed"
    },
    "broadcastOptimization": {
      "enabled": true,
      "techniques": [
        "Connection grouping",
        "Message batching",
        "Compression"
      ]
    },
    "clientProtocols": [
      "WebSockets",
      "Server-Sent Events (SSE)",
      "Long Polling"
    ],
    "negotiation": {
      "enabled": true,
      "fallbackOrder": ["WebSockets", "ServerSentEvents", "LongPolling"]
    }
  },
  "bestPractices": {
    "connectionManagement": [
      "Use connection multiplexing (1 connection per client)",
      "Implement graceful disconnection",
      "Handle reconnection with exponential backoff",
      "Clean up server-side resources on disconnect"
    ],
    "messageDesign": [
      "Keep messages small (<10KB)",
      "Use binary formats for large data (MessagePack)",
      "Compress messages when possible",
      "Batch related messages"
    ],
    "scalability": [
      "Use Redis backplane for multi-instance scenarios",
      "Implement connection throttling",
      "Monitor and alert on capacity limits",
      "Use groups for targeted messaging"
    ],
    "security": [
      "Always use HTTPS/WSS in production",
      "Validate all incoming messages",
      "Implement rate limiting per user/IP",
      "Use short-lived access tokens"
    ]
  },
  "deployment": {
    "azureCLI": [
      "# 1. Create SignalR Service",
      "az signalr create --name ailydian-signalr --resource-group ailydian-ultra-pro-rg --sku Standard_S1 --unit-count 1 --location eastus --service-mode Default",
      "",
      "# 2. Get connection string",
      "az signalr key list --name ailydian-signalr --resource-group ailydian-ultra-pro-rg --query primaryConnectionString -o tsv",
      "",
      "# 3. Enable CORS",
      "az signalr cors add --name ailydian-signalr --resource-group ailydian-ultra-pro-rg --allowed-origins 'https://ailydian.com' 'https://www.ailydian.com'",
      "",
      "# 4. Configure upstream (for serverless mode)",
      "az signalr upstream update --name ailydian-signalr --resource-group ailydian-ultra-pro-rg --template url-template='https://ailydian.com/api/signalr/{hub}/{event}' hub-pattern='*' event-pattern='*'",
      "",
      "# 5. Enable diagnostics",
      "az monitor diagnostic-settings create --name signalr-diagnostics --resource /subscriptions/{subscriptionId}/resourceGroups/ailydian-ultra-pro-rg/providers/Microsoft.SignalRService/SignalR/ailydian-signalr --logs '[{\"category\":\"AllLogs\",\"enabled\":true,\"retentionPolicy\":{\"days\":30,\"enabled\":true}}]' --workspace /subscriptions/{subscriptionId}/resourceGroups/ailydian-ultra-pro-rg/providers/Microsoft.OperationalInsights/workspaces/ailydian-logs"
    ],
    "terraform": {
      "resource": "azurerm_signalr_service",
      "example": "resource \"azurerm_signalr_service\" \"ailydian\" {\n  name                = \"ailydian-signalr\"\n  location            = azurerm_resource_group.ailydian.location\n  resource_group_name = azurerm_resource_group.ailydian.name\n  sku {\n    name     = \"Standard_S1\"\n    capacity = 1\n  }\n  service_mode = \"Default\"\n  cors {\n    allowed_origins = [\"https://ailydian.com\"]\n  }\n}"
    }
  },
  "clientLibraries": {
    "javascript": {
      "package": "@microsoft/signalr",
      "version": "^7.0.0",
      "installation": "npm install @microsoft/signalr"
    },
    "dotnet": {
      "package": "Microsoft.AspNetCore.SignalR.Client",
      "version": "^7.0.0",
      "installation": "dotnet add package Microsoft.AspNetCore.SignalR.Client"
    },
    "java": {
      "package": "com.microsoft.signalr",
      "version": "^7.0.0",
      "installation": "Maven dependency"
    },
    "python": {
      "package": "signalrcore",
      "version": "^0.9.5",
      "installation": "pip install signalrcore"
    }
  },
  "useCases": [
    {
      "name": "Real-time Chat",
      "description": "Instant messaging between users",
      "expectedLatency": "< 100ms",
      "messagesPerSecond": 1000
    },
    {
      "name": "AI Response Streaming",
      "description": "Stream AI responses token-by-token",
      "expectedLatency": "< 50ms per chunk",
      "chunksPerResponse": "50-200"
    },
    {
      "name": "Presence Detection",
      "description": "Show online/offline status",
      "updateFrequency": "Every 30s",
      "concurrentUsers": 1000
    },
    {
      "name": "Live Notifications",
      "description": "Real-time alerts and updates",
      "expectedLatency": "< 200ms",
      "notificationsPerMinute": 500
    },
    {
      "name": "Collaborative Editing",
      "description": "Multiple users editing same document",
      "expectedLatency": "< 100ms",
      "operationsPerSecond": 100
    }
  ],
  "performanceMetrics": {
    "connectionEstablishment": {
      "target": "< 500ms",
      "p95": "< 1s",
      "p99": "< 2s"
    },
    "messageLatency": {
      "target": "< 100ms",
      "p95": "< 200ms",
      "p99": "< 500ms"
    },
    "throughput": {
      "messagesPerSecond": 10000,
      "concurrentConnections": 1000,
      "maxMessageSize": "32KB"
    },
    "reliability": {
      "uptime": "99.9%",
      "messageDeliveryRate": "> 99.99%",
      "reconnectionSuccessRate": "> 95%"
    }
  },
  "troubleshooting": {
    "commonIssues": [
      {
        "issue": "Connection fails with 401 Unauthorized",
        "solution": "Verify access token is valid and not expired"
      },
      {
        "issue": "Messages not received by clients",
        "solution": "Check hub name and method names match exactly (case-sensitive)"
      },
      {
        "issue": "High latency (> 500ms)",
        "solution": "Check server location, enable compression, verify network"
      },
      {
        "issue": "Connection limit reached",
        "solution": "Scale up units or implement connection pooling"
      },
      {
        "issue": "Frequent disconnections",
        "solution": "Increase keepAlive interval, check network stability"
      }
    ]
  },
  "integrations": {
    "azureFunctions": {
      "enabled": true,
      "bindings": [
        "SignalR input binding",
        "SignalR output binding"
      ],
      "useCases": ["Serverless real-time APIs", "Event-driven messaging"]
    },
    "eventGrid": {
      "enabled": true,
      "events": ["ClientConnected", "ClientDisconnected"],
      "useCases": ["Audit logging", "Analytics"]
    },
    "applicationInsights": {
      "enabled": true,
      "tracking": ["Connection metrics", "Message counts", "Errors"]
    }
  },
  "environmentVariables": {
    "AZURE_SIGNALR_CONNECTION_STRING": "${AZURE_SIGNALR_CONNECTION_STRING}",
    "SIGNALR_SERVICE_MODE": "Default",
    "SIGNALR_ENABLE_DIAGNOSTICS": "true",
    "SIGNALR_MAX_CONNECTIONS": "1000",
    "SIGNALR_MESSAGE_BUFFER_SIZE": "10000"
  },
  "notes": "Azure SignalR Service provides enterprise-grade real-time communication with 99.9% SLA, automatic scaling, and global distribution. Perfect for chat, live streaming, notifications, and collaborative features."
}

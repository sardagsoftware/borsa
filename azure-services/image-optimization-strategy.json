{
  "name": "Ailydian Ultra Pro - Image Optimization Strategy",
  "description": "Comprehensive image optimization with Azure Blob Storage, modern formats (WebP, AVIF), and responsive images",
  "version": "1.0.0",
  "storageAccount": {
    "name": "ailydianimages",
    "sku": "Standard_LRS",
    "kind": "StorageV2",
    "tier": "Hot",
    "containers": [
      {
        "name": "images-original",
        "accessLevel": "Private",
        "description": "Original high-resolution images uploaded by users"
      },
      {
        "name": "images-optimized",
        "accessLevel": "Blob",
        "description": "Optimized images in multiple formats and sizes"
      },
      {
        "name": "user-avatars",
        "accessLevel": "Blob",
        "description": "User profile avatars (optimized)"
      },
      {
        "name": "ai-generated",
        "accessLevel": "Blob",
        "description": "AI-generated images (DALL-E, Stable Diffusion, etc.)"
      }
    ]
  },
  "optimizationPipeline": {
    "stages": [
      {
        "stage": 1,
        "name": "Upload & Validation",
        "description": "Upload original image to Azure Blob Storage",
        "actions": [
          "Validate file type (JPEG, PNG, GIF, WebP)",
          "Validate file size (max 10MB)",
          "Validate dimensions (max 8000x8000)",
          "Scan for malware with Azure Defender",
          "Generate unique filename with UUID",
          "Upload to 'images-original' container"
        ]
      },
      {
        "stage": 2,
        "name": "Format Conversion",
        "description": "Convert to modern image formats",
        "formats": [
          {
            "format": "WebP",
            "quality": 85,
            "description": "30% smaller than JPEG, supported by 95%+ browsers",
            "use": "Primary format for web delivery"
          },
          {
            "format": "AVIF",
            "quality": 80,
            "description": "50% smaller than JPEG, supported by 80%+ browsers",
            "use": "Future-proof format for supported browsers"
          },
          {
            "format": "JPEG (optimized)",
            "quality": 85,
            "description": "Fallback for older browsers",
            "use": "Legacy browser support"
          }
        ],
        "tool": "Sharp (Node.js image processing library)"
      },
      {
        "stage": 3,
        "name": "Responsive Sizing",
        "description": "Generate multiple sizes for responsive images",
        "sizes": [
          {
            "name": "thumbnail",
            "width": 150,
            "height": 150,
            "fit": "cover",
            "use": "User avatars, small previews"
          },
          {
            "name": "small",
            "width": 480,
            "height": null,
            "fit": "inside",
            "use": "Mobile devices (portrait)"
          },
          {
            "name": "medium",
            "width": 960,
            "height": null,
            "fit": "inside",
            "use": "Tablets and small desktops"
          },
          {
            "name": "large",
            "width": 1920,
            "height": null,
            "fit": "inside",
            "use": "Desktops and high-res displays"
          },
          {
            "name": "xlarge",
            "width": 3840,
            "height": null,
            "fit": "inside",
            "use": "4K displays and print"
          }
        ]
      },
      {
        "stage": 4,
        "name": "Metadata Extraction",
        "description": "Extract and store image metadata",
        "metadata": [
          "originalFormat",
          "width",
          "height",
          "fileSize",
          "exifData",
          "colorProfile",
          "hasAlpha",
          "isAnimated",
          "uploadedAt",
          "uploadedBy"
        ]
      },
      {
        "stage": 5,
        "name": "CDN Upload",
        "description": "Upload optimized images to CDN",
        "actions": [
          "Upload all variants to 'images-optimized' container",
          "Set appropriate cache headers (Cache-Control: max-age=31536000)",
          "Set Content-Type headers",
          "Invalidate CDN cache for updated images"
        ]
      }
    ]
  },
  "deliveryStrategy": {
    "htmlPicture": {
      "description": "Use <picture> element for format and size selection",
      "example": "<picture>\n  <source srcset=\"/images/hero.avif\" type=\"image/avif\">\n  <source srcset=\"/images/hero.webp\" type=\"image/webp\">\n  <img src=\"/images/hero.jpg\" alt=\"Hero\" loading=\"lazy\">\n</picture>"
    },
    "responsiveImages": {
      "description": "Use srcset for responsive image delivery",
      "example": "<img\n  src=\"/images/photo.jpg\"\n  srcset=\"\n    /images/photo-small.webp 480w,\n    /images/photo-medium.webp 960w,\n    /images/photo-large.webp 1920w\n  \"\n  sizes=\"(max-width: 600px) 480px, (max-width: 1200px) 960px, 1920px\"\n  alt=\"Photo\"\n  loading=\"lazy\"\n>"
    },
    "lazyLoading": {
      "description": "Defer loading of off-screen images",
      "attributes": {
        "loading": "lazy",
        "decoding": "async"
      },
      "polyfill": "lazysizes.js for older browsers"
    },
    "blurPlaceholder": {
      "description": "Show blurred placeholder while image loads",
      "technique": "Low-Quality Image Placeholder (LQIP)",
      "implementation": "Generate 20px wide blurred version, encode as base64, inline in HTML"
    }
  },
  "compressionSettings": {
    "jpeg": {
      "quality": 85,
      "progressive": true,
      "chromaSubsampling": "4:2:0",
      "mozjpeg": true
    },
    "png": {
      "compressionLevel": 9,
      "palette": true,
      "colors": 256,
      "dithering": 1.0
    },
    "webp": {
      "quality": 85,
      "method": 6,
      "lossless": false,
      "nearLossless": false
    },
    "avif": {
      "quality": 80,
      "speed": 5,
      "chromaSubsampling": "4:2:0"
    }
  },
  "performanceImpact": {
    "before": {
      "averageImageSize": "500KB",
      "pageLoadTime": "3.5s",
      "dataTransfer": "15MB per page"
    },
    "after": {
      "averageImageSize": "80KB (84% reduction)",
      "pageLoadTime": "1.2s (66% faster)",
      "dataTransfer": "2.4MB per page (84% reduction)"
    },
    "metrics": {
      "formatSavings": {
        "webp": "-30% vs JPEG",
        "avif": "-50% vs JPEG"
      },
      "responsiveSavings": "Mobile devices download 50-70% less data",
      "lazyLoadingSavings": "Initial page load: -60% data transfer"
    }
  },
  "azureFunctions": {
    "imageProcessor": {
      "trigger": "Blob Storage (images-original)",
      "runtime": "Node.js 18",
      "timeout": "5 minutes",
      "memory": "1024MB",
      "concurrency": 10,
      "actions": [
        "Download original image from Blob Storage",
        "Convert to WebP, AVIF, optimized JPEG",
        "Generate responsive sizes (thumbnail, small, medium, large)",
        "Extract metadata",
        "Upload all variants to images-optimized container",
        "Store metadata in Azure Table Storage",
        "Trigger CDN purge for updated images"
      ],
      "code": "functions/image-processor.js"
    }
  },
  "nodeImplementation": {
    "library": "sharp",
    "version": "^0.33.0",
    "features": [
      "High-performance image processing",
      "WebP and AVIF support",
      "Resize, crop, rotate operations",
      "Metadata extraction",
      "Progressive JPEG generation"
    ],
    "exampleCode": "const sharp = require('sharp');\n\nasync function optimizeImage(inputBuffer) {\n  const image = sharp(inputBuffer);\n  \n  // Generate WebP\n  const webp = await image\n    .webp({ quality: 85, effort: 6 })\n    .toBuffer();\n  \n  // Generate AVIF\n  const avif = await image\n    .avif({ quality: 80, speed: 5 })\n    .toBuffer();\n  \n  // Generate responsive sizes\n  const sizes = [150, 480, 960, 1920];\n  const variants = await Promise.all(\n    sizes.map(width => \n      image.resize(width).webp({ quality: 85 }).toBuffer()\n    )\n  );\n  \n  return { webp, avif, variants };\n}"
  },
  "deployment": {
    "azureCLI": [
      "# 1. Create storage account",
      "az storage account create --name ailydianimages --resource-group ailydian-ultra-pro-rg --location eastus --sku Standard_LRS --kind StorageV2",
      "",
      "# 2. Create containers",
      "az storage container create --name images-original --account-name ailydianimages --public-access off",
      "az storage container create --name images-optimized --account-name ailydianimages --public-access blob",
      "",
      "# 3. Enable static website hosting",
      "az storage blob service-properties update --account-name ailydianimages --static-website --index-document index.html",
      "",
      "# 4. Configure CORS",
      "az storage cors add --account-name ailydianimages --services b --methods GET HEAD --origins https://ailydian.com --allowed-headers '*' --max-age 3600",
      "",
      "# 5. Deploy Azure Function",
      "az functionapp create --resource-group ailydian-ultra-pro-rg --name ailydian-image-processor --storage-account ailydianimages --runtime node --runtime-version 18 --functions-version 4 --os-type Linux",
      "",
      "# 6. Configure Function trigger",
      "az functionapp config appsettings set --name ailydian-image-processor --resource-group ailydian-ultra-pro-rg --settings BLOB_STORAGE_CONNECTION_STRING=$CONNECTION_STRING"
    ]
  },
  "costEstimation": {
    "monthly": {
      "blobStorage": {
        "hotTier": "$0.0184/GB",
        "estimatedUsage": "500GB",
        "cost": "$9.20/month"
      },
      "operations": {
        "write": "$0.055 per 10,000 operations",
        "read": "$0.0044 per 10,000 operations",
        "estimatedWrites": "1M/month",
        "estimatedReads": "10M/month",
        "cost": "$10/month"
      },
      "azureFunctions": {
        "executions": "$0.20 per million executions",
        "estimatedExecutions": "1M/month",
        "cost": "$0.20/month"
      },
      "dataTransfer": {
        "egress": "$0.087/GB",
        "estimatedUsage": "2TB/month (after optimization)",
        "cost": "$174/month"
      },
      "totalMonthly": "$193.40/month"
    },
    "savingsVsUnoptimized": {
      "dataTransferBefore": "12TB/month × $0.087/GB = $1,044/month",
      "dataTransferAfter": "2TB/month × $0.087/GB = $174/month",
      "savings": "$870/month (83% reduction)"
    }
  },
  "monitoring": {
    "metrics": [
      {
        "name": "Average Image Size",
        "target": "< 100KB",
        "alert": "> 200KB"
      },
      {
        "name": "WebP Adoption Rate",
        "target": "> 90%",
        "alert": "< 70%"
      },
      {
        "name": "Processing Time",
        "target": "< 5 seconds per image",
        "alert": "> 10 seconds"
      },
      {
        "name": "Failed Conversions",
        "target": "< 1%",
        "alert": "> 5%"
      }
    ]
  },
  "environmentVariables": {
    "AZURE_STORAGE_ACCOUNT": "ailydianimages",
    "AZURE_STORAGE_CONNECTION_STRING": "${AZURE_STORAGE_CONNECTION_STRING}",
    "IMAGES_CONTAINER_ORIGINAL": "images-original",
    "IMAGES_CONTAINER_OPTIMIZED": "images-optimized",
    "CDN_IMAGES_URL": "https://cdn.ailydian.com/images",
    "IMAGE_QUALITY_WEBP": "85",
    "IMAGE_QUALITY_AVIF": "80",
    "IMAGE_QUALITY_JPEG": "85",
    "IMAGE_MAX_WIDTH": "3840",
    "IMAGE_MAX_HEIGHT": "3840"
  },
  "notes": "Image optimization can reduce page load times by 60-80% and data transfer by 83%, resulting in $870/month savings on bandwidth costs."
}

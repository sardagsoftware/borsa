/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cities
         * @description Retrieve a paginated list of cities
         */
        get: operations["listCities"];
        put?: never;
        /**
         * Create a new city
         * @description Register a new smart city in the platform
         */
        post: operations["createCity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cities/{cityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get city details
         * @description Retrieve detailed information about a specific city
         */
        get: operations["getCity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cities/{cityId}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List city assets
         * @description Retrieve a paginated list of assets for a city
         */
        get: operations["listAssets"];
        put?: never;
        /**
         * Register a city asset
         * @description Register a new IoT asset (sensor, camera, traffic light) in the city
         */
        post: operations["registerAsset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cities/{cityId}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get city metrics
         * @description Retrieve metrics for traffic, energy, air quality, or water usage
         */
        get: operations["getCityMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events
         * @description Retrieve a paginated list of city events
         */
        get: operations["listEvents"];
        put?: never;
        /**
         * Report a city event
         * @description Report a security, disaster, or other city event
         */
        post: operations["reportEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List alerts
         * @description Retrieve a paginated list of alerts
         */
        get: operations["listAlerts"];
        put?: never;
        /**
         * Create an alert
         * @description Create a new alert for city monitoring
         */
        post: operations["createAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    cityCreated: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * City Created Event
         * @description Triggered when a new city is created.
         *
         *     Webhook signature validation:
         *     1. Extract X-Lydian-Signature and X-Lydian-Timestamp headers
         *     2. Construct payload: `{timestamp}.{request_body}`
         *     3. Compute HMAC-SHA256 with your webhook secret
         *     4. Compare computed signature with X-Lydian-Signature
         *     5. Verify timestamp is within 300 seconds
         *
         */
        post: operations["onCityCreated"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    assetCreated: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Asset Created Event
         * @description Triggered when a new asset is registered
         */
        post: operations["onAssetCreated"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    alertTriggered: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alert Triggered Event
         * @description Triggered when a new alert is created
         */
        post: operations["onAlertTriggered"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        City: {
            /**
             * @description Unique city identifier (ULID)
             * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
             */
            id: string;
            /** @example Istanbul */
            name: string;
            /**
             * @description ISO 3166-1 alpha-2 country code
             * @example TR
             */
            country: string;
            /**
             * @description IANA timezone identifier
             * @example Europe/Istanbul
             */
            timezone: string;
            coordinates: components["schemas"]["Coordinates"];
            /** @example 15462452 */
            population: number;
            /** @description Custom metadata for the city */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @example 2025-10-07T10:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-10-07T10:00:00Z
             */
            updatedAt: string;
        };
        CreateCityRequest: {
            name: string;
            country: string;
            timezone: string;
            coordinates: components["schemas"]["Coordinates"];
            population: number;
            metadata?: {
                [key: string]: unknown;
            };
        };
        Asset: {
            /** @example asset_01HJ5K3M2N5P6Q7R8S9T0V1W2X */
            id: string;
            cityId: string;
            type: components["schemas"]["AssetType"];
            name: string;
            location: components["schemas"]["Coordinates"];
            /** @enum {string} */
            status: "active" | "inactive" | "maintenance" | "error";
            metadata?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        CreateAssetRequest: {
            type: components["schemas"]["AssetType"];
            name: string;
            location: components["schemas"]["Coordinates"];
            /** @enum {string} */
            status: "active" | "inactive" | "maintenance" | "error";
            metadata?: {
                [key: string]: unknown;
            };
        };
        /**
         * @example traffic_light
         * @enum {string}
         */
        AssetType: "traffic_light" | "speed_camera" | "cctv_camera" | "air_quality_sensor" | "noise_sensor" | "parking_sensor" | "street_light" | "water_meter" | "energy_meter" | "weather_station";
        MetricsResponse: {
            cityId: string;
            /** @enum {string} */
            kind: "traffic" | "energy" | "air" | "water";
            /** Format: date-time */
            from: string;
            /** Format: date-time */
            to: string;
            /** @enum {string} */
            granularity: "minute" | "hour" | "day" | "week" | "month";
            data: components["schemas"]["MetricDataPoint"][];
        };
        MetricDataPoint: {
            /** Format: date-time */
            timestamp: string;
            /** Format: double */
            value: number;
            unit?: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        Event: {
            /** @example event_01HJ5K3M2N5P6Q7R8S9T0V1W2X */
            id: string;
            cityId: string;
            /** @enum {string} */
            type: "security" | "disaster" | "traffic" | "maintenance" | "other";
            /** @enum {string} */
            severity: "low" | "medium" | "high" | "critical";
            title: string;
            description?: string;
            location?: components["schemas"]["Coordinates"];
            /**
             * Format: date-time
             * @description When the event occurred
             */
            timestamp: string;
            /**
             * Format: date-time
             * @description When the event was reported
             */
            createdAt: string;
        };
        CreateEventRequest: {
            cityId: string;
            /** @enum {string} */
            type: "security" | "disaster" | "traffic" | "maintenance" | "other";
            /** @enum {string} */
            severity: "low" | "medium" | "high" | "critical";
            title: string;
            description?: string;
            location?: components["schemas"]["Coordinates"];
            /** Format: date-time */
            timestamp: string;
        };
        Alert: {
            /** @example alert_01HJ5K3M2N5P6Q7R8S9T0V1W2X */
            id: string;
            cityId: string;
            title: string;
            description?: string;
            /** @enum {string} */
            status: "active" | "resolved" | "acknowledged";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            resolvedAt?: string;
        };
        CreateAlertRequest: {
            cityId: string;
            title: string;
            description?: string;
        };
        Coordinates: {
            /**
             * Format: double
             * @example 41.0082
             */
            latitude: number;
            /**
             * Format: double
             * @example 28.9784
             */
            longitude: number;
        };
        PaginationInfo: {
            /** @description Whether there is a next page */
            hasNext: boolean;
            /** @description Whether there is a previous page */
            hasPrev: boolean;
            /**
             * Format: byte
             * @description Cursor for the next page
             */
            nextCursor?: string;
            /**
             * Format: byte
             * @description Cursor for the previous page
             */
            prevCursor?: string;
            /** @description Total count (optional, may be expensive to compute) */
            total?: number;
        };
        Error: {
            error: {
                /**
                 * @description Machine-readable error code
                 * @example VALIDATION_ERROR
                 */
                code: string;
                /**
                 * @description Human-readable error message
                 * @example Invalid request parameters
                 */
                message: string;
                /** @description Detailed validation errors */
                details?: {
                    /**
                     * @description JSON path to the field with error
                     * @example coordinates.latitude
                     */
                    path: string;
                    /**
                     * @description Description of the issue
                     * @example Must be between -90 and 90
                     */
                    issue: string;
                }[];
                /**
                 * Format: uuid
                 * @description Unique ID for tracking this error
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                correlationId: string;
                /**
                 * Format: date-time
                 * @example 2025-10-07T10:00:00Z
                 */
                timestamp?: string;
            };
        };
    };
    responses: {
        /** @description Bad request - invalid parameters */
        BadRequest: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "VALIDATION_ERROR",
                 *         "message": "Invalid request parameters",
                 *         "details": [
                 *           {
                 *             "path": "coordinates.latitude",
                 *             "issue": "Must be between -90 and 90"
                 *           }
                 *         ],
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized - invalid or missing credentials */
        Unauthorized: {
            headers: {
                /** @example Bearer realm="LyDian API", error="invalid_token" */
                "WWW-Authenticate"?: string;
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "UNAUTHORIZED",
                 *         "message": "Invalid or missing authentication credentials",
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "NOT_FOUND",
                 *         "message": "The requested resource was not found",
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict - duplicate idempotency key or resource already exists */
        Conflict: {
            headers: {
                /** @description Location of the existing resource */
                Location?: string;
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "DUPLICATE_REQUEST",
                 *         "message": "Request with this idempotency key already processed",
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Too many requests - rate limit exceeded */
        TooManyRequests: {
            headers: {
                /**
                 * @description Seconds until rate limit resets
                 * @example 3600
                 */
                "Retry-After"?: number;
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining"?: number;
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "RATE_LIMIT_EXCEEDED",
                 *         "message": "Rate limit exceeded. Please retry after 3600 seconds.",
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "INTERNAL_ERROR",
                 *         "message": "An internal server error occurred",
                 *         "correlationId": "550e8400-e29b-41d4-a716-446655440000",
                 *         "timestamp": "2025-10-07T10:00:00Z"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /**
         * @description Unique city identifier (ULID format)
         * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
         */
        CityId: string;
        /**
         * @description Pagination cursor for next page
         * @example eyJpZCI6ImNpdHlfMDFISjVLM00yTjVQNlE3UjhTOVQwVjFXMlgiLCJvZmZzZXQiOjUwfQ==
         */
        Cursor: string;
        /**
         * @description Maximum number of items to return (1-100)
         * @example 50
         */
        Limit: number;
        /**
         * @description UUID v4 for idempotent requests. Prevents duplicate operations.
         * @example 550e8400-e29b-41d4-a716-446655440000
         */
        IdempotencyKey: string;
    };
    requestBodies: never;
    headers: {
        /**
         * @description Maximum number of requests allowed per hour
         * @example 1000
         */
        "X-RateLimit-Limit": number;
        /**
         * @description Number of requests remaining in current window
         * @example 999
         */
        "X-RateLimit-Remaining": number;
        /**
         * @description Unix timestamp when the rate limit resets
         * @example 1696680000
         */
        "X-RateLimit-Reset": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listCities: {
        parameters: {
            query?: {
                /**
                 * @description Pagination cursor for next page
                 * @example eyJpZCI6ImNpdHlfMDFISjVLM00yTjVQNlE3UjhTOVQwVjFXMlgiLCJvZmZzZXQiOjUwfQ==
                 */
                cursor?: components["parameters"]["Cursor"];
                /**
                 * @description Maximum number of items to return (1-100)
                 * @example 50
                 */
                limit?: components["parameters"]["Limit"];
                /**
                 * @description Filter by ISO country code
                 * @example TR
                 */
                country?: string;
                /**
                 * @description Search cities by name
                 * @example Istanbul
                 */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of cities */
            200: {
                headers: {
                    /**
                     * @description Pagination links (next, prev)
                     * @example <https://api.lydian.com/v1/smart-cities/cities?cursor=xyz&limit=50>; rel="next"
                     */
                    Link?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["City"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    createCity: {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description UUID v4 for idempotent requests. Prevents duplicate operations.
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCityRequest"];
            };
        };
        responses: {
            /** @description City created successfully */
            201: {
                headers: {
                    /** @description URL of the created city */
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["City"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            409: components["responses"]["Conflict"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique city identifier (ULID format)
                 * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
                 */
                cityId: components["parameters"]["CityId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description City details */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["City"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    listAssets: {
        parameters: {
            query?: {
                /**
                 * @description Pagination cursor for next page
                 * @example eyJpZCI6ImNpdHlfMDFISjVLM00yTjVQNlE3UjhTOVQwVjFXMlgiLCJvZmZzZXQiOjUwfQ==
                 */
                cursor?: components["parameters"]["Cursor"];
                /**
                 * @description Maximum number of items to return (1-100)
                 * @example 50
                 */
                limit?: components["parameters"]["Limit"];
                /** @description Filter by asset type */
                type?: components["schemas"]["AssetType"];
                /** @description Filter by status */
                status?: "active" | "inactive" | "maintenance" | "error";
            };
            header?: never;
            path: {
                /**
                 * @description Unique city identifier (ULID format)
                 * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
                 */
                cityId: components["parameters"]["CityId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of assets */
            200: {
                headers: {
                    Link?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Asset"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    registerAsset: {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description UUID v4 for idempotent requests. Prevents duplicate operations.
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                /**
                 * @description Unique city identifier (ULID format)
                 * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
                 */
                cityId: components["parameters"]["CityId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAssetRequest"];
            };
        };
        responses: {
            /** @description Asset registered successfully */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Asset"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            409: components["responses"]["Conflict"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    getCityMetrics: {
        parameters: {
            query: {
                /** @description Type of metric to retrieve */
                kind: "traffic" | "energy" | "air" | "water";
                /**
                 * @description Start timestamp (ISO 8601)
                 * @example 2025-10-07T00:00:00Z
                 */
                from: string;
                /**
                 * @description End timestamp (ISO 8601)
                 * @example 2025-10-07T23:59:59Z
                 */
                to: string;
                /** @description Time granularity for aggregation */
                granularity?: "minute" | "hour" | "day" | "week" | "month";
            };
            header?: never;
            path: {
                /**
                 * @description Unique city identifier (ULID format)
                 * @example city_01HJ5K3M2N5P6Q7R8S9T0V1W2X
                 */
                cityId: components["parameters"]["CityId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description City metrics */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    listEvents: {
        parameters: {
            query?: {
                /**
                 * @description Pagination cursor for next page
                 * @example eyJpZCI6ImNpdHlfMDFISjVLM00yTjVQNlE3UjhTOVQwVjFXMlgiLCJvZmZzZXQiOjUwfQ==
                 */
                cursor?: components["parameters"]["Cursor"];
                /**
                 * @description Maximum number of items to return (1-100)
                 * @example 50
                 */
                limit?: components["parameters"]["Limit"];
                /** @description Filter by city ID */
                cityId?: string;
                /** @description Filter by event type */
                type?: "security" | "disaster" | "traffic" | "maintenance" | "other";
                /** @description Filter by severity */
                severity?: "low" | "medium" | "high" | "critical";
                /** @description Start timestamp */
                from?: string;
                /** @description End timestamp */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of events */
            200: {
                headers: {
                    Link?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Event"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    reportEvent: {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description UUID v4 for idempotent requests. Prevents duplicate operations.
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventRequest"];
            };
        };
        responses: {
            /** @description Event reported successfully */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            409: components["responses"]["Conflict"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    listAlerts: {
        parameters: {
            query?: {
                /**
                 * @description Pagination cursor for next page
                 * @example eyJpZCI6ImNpdHlfMDFISjVLM00yTjVQNlE3UjhTOVQwVjFXMlgiLCJvZmZzZXQiOjUwfQ==
                 */
                cursor?: components["parameters"]["Cursor"];
                /**
                 * @description Maximum number of items to return (1-100)
                 * @example 50
                 */
                limit?: components["parameters"]["Limit"];
                /** @description Filter by city ID */
                cityId?: string;
                /** @description Filter by alert status */
                status?: "active" | "resolved" | "acknowledged";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of alerts */
            200: {
                headers: {
                    Link?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Alert"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    createAlert: {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description UUID v4 for idempotent requests. Prevents duplicate operations.
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAlertRequest"];
            };
        };
        responses: {
            /** @description Alert created successfully */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Alert"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            409: components["responses"]["Conflict"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    onCityCreated: {
        parameters: {
            query?: never;
            header: {
                /** @example sha256=5d41402abc4b2a76b9719d911017c592 */
                "X-Lydian-Signature": string;
                /** @example 1696680000 */
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "city.created";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["City"];
                };
            };
        };
        responses: {
            /** @description Webhook received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    onAssetCreated: {
        parameters: {
            query?: never;
            header: {
                "X-Lydian-Signature": string;
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "asset.created";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["Asset"];
                };
            };
        };
        responses: {
            /** @description Webhook received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    onAlertTriggered: {
        parameters: {
            query?: never;
            header: {
                "X-Lydian-Signature": string;
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "alert.triggered";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["Alert"];
                };
            };
        };
        responses: {
            /** @description Webhook received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

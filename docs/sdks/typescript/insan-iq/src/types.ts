/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/personas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List personas */
        get: operations["listPersonas"];
        put?: never;
        /** Create a persona */
        post: operations["createPersona"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/personas/{personaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get persona details */
        get: operations["getPersona"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List skills */
        get: operations["listSkills"];
        put?: never;
        /** Publish a skill */
        post: operations["publishSkill"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/{skillId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get skill details */
        get: operations["getSkill"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an assistant */
        post: operations["createAssistant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants/{assistantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get assistant details */
        get: operations["getAssistant"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants/{assistantId}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an assistant session */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants/{assistantId}/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session details */
        get: operations["getSession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants/{assistantId}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get assistant state */
        get: operations["getAssistantState"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    personaCreated: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Persona Created Event */
        post: operations["onPersonaCreated"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        Persona: {
            id: string;
            name: string;
            traits: {
                [key: string]: unknown;
            };
            skills?: string[];
            metadata?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
        };
        CreatePersonaRequest: {
            name: string;
            traits: {
                [key: string]: unknown;
            };
            skills?: string[];
        };
        Skill: {
            id: string;
            name: string;
            category: string;
            description?: string;
            version: string;
            parameters?: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
        };
        CreateSkillRequest: {
            name: string;
            category: string;
            description?: string;
            version: string;
            parameters?: Record<string, never>;
        };
        Assistant: {
            id: string;
            personaId: string;
            name: string;
            instructions?: string;
            /** @enum {string} */
            status: "active" | "inactive" | "paused";
            /** Format: date-time */
            createdAt: string;
        };
        CreateAssistantRequest: {
            personaId: string;
            name: string;
            instructions?: string;
        };
        Session: {
            id: string;
            assistantId: string;
            /** @enum {string} */
            status: "active" | "completed" | "failed";
            metadata?: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
        };
        CreateSessionRequest: {
            metadata?: Record<string, never>;
        };
        AssistantState: {
            assistantId: string;
            status: string;
            state?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            lastUpdated: string;
        };
        PaginationInfo: {
            hasNext: boolean;
            hasPrev: boolean;
            nextCursor?: string;
            prevCursor?: string;
        };
        Error: {
            error: {
                code: string;
                message: string;
                /** Format: uuid */
                correlationId: string;
            };
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Too many requests */
        TooManyRequests: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        IdempotencyKey: string;
        Cursor: string;
        Limit: number;
    };
    requestBodies: never;
    headers: {
        /** @description Rate limit */
        "X-RateLimit-Limit": number;
        /** @description Remaining requests */
        "X-RateLimit-Remaining": number;
        /** @description Reset timestamp */
        "X-RateLimit-Reset": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listPersonas: {
        parameters: {
            query?: {
                cursor?: components["parameters"]["Cursor"];
                limit?: components["parameters"]["Limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of personas */
            200: {
                headers: {
                    Link?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Persona"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    createPersona: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePersonaRequest"];
            };
        };
        responses: {
            /** @description Persona created */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    "X-RateLimit-Reset": components["headers"]["X-RateLimit-Reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Persona"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            409: components["responses"]["Conflict"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    getPersona: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Persona details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Persona"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    listSkills: {
        parameters: {
            query?: {
                cursor?: components["parameters"]["Cursor"];
                limit?: components["parameters"]["Limit"];
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of skills */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Skill"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
        };
    };
    publishSkill: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSkillRequest"];
            };
        };
        responses: {
            /** @description Skill published */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Skill"];
                };
            };
            400: components["responses"]["BadRequest"];
            409: components["responses"]["Conflict"];
        };
    };
    getSkill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Skill details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Skill"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    createAssistant: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAssistantRequest"];
            };
        };
        responses: {
            /** @description Assistant created */
            201: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assistant"];
                };
            };
            400: components["responses"]["BadRequest"];
        };
    };
    getAssistant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Assistant details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assistant"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                assistantId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSessionRequest"];
            };
        };
        responses: {
            /** @description Session created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
        };
    };
    getSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistantId: string;
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
        };
    };
    getAssistantState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assistantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Assistant state */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantState"];
                };
            };
        };
    };
    onPersonaCreated: {
        parameters: {
            query?: never;
            header: {
                "X-Lydian-Signature": string;
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "persona.created";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["Persona"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

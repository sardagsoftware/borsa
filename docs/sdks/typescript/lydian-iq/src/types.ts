/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/signals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List signals */
        get: operations["listSignals"];
        put?: never;
        /** Ingest a signal or event */
        post: operations["ingestSignal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/indicators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get indicator dashboard */
        get: operations["getIndicatorDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/indicators/{indicatorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific indicator */
        get: operations["getIndicator"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/knowledge-graph/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List knowledge graph nodes */
        get: operations["listKGNodes"];
        put?: never;
        /** Create knowledge graph node */
        post: operations["createKGNode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/knowledge-graph/edges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create knowledge graph edge */
        post: operations["createKGEdge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/knowledge-graph/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query knowledge graph */
        get: operations["queryKnowledgeGraph"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get analytical insights */
        get: operations["getInsights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/insights/{insightId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get specific insight */
        get: operations["getInsight"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    signalReceived: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signal Received Event */
        post: operations["onSignalReceived"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    insightGenerated: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Insight Generated Event */
        post: operations["onInsightGenerated"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        Signal: {
            id: string;
            type: string;
            source: string;
            payload: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            timestamp: string;
            /** Format: date-time */
            createdAt: string;
        };
        CreateSignalRequest: {
            type: string;
            source: string;
            payload: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        IndicatorDashboard: {
            indicators: components["schemas"]["Indicator"][];
            /** Format: date-time */
            lastUpdated: string;
        };
        Indicator: {
            id: string;
            name: string;
            value: number;
            unit: string;
            /** @enum {string} */
            trend: "up" | "down" | "stable";
            metadata?: Record<string, never>;
            /** Format: date-time */
            updatedAt: string;
        };
        KGNode: {
            id: string;
            nodeType: string;
            label: string;
            properties: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
        };
        CreateKGNodeRequest: {
            nodeType: string;
            label: string;
            properties?: {
                [key: string]: unknown;
            };
        };
        KGEdge: {
            id: string;
            fromNodeId: string;
            toNodeId: string;
            edgeType: string;
            properties?: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
        };
        CreateKGEdgeRequest: {
            fromNodeId: string;
            toNodeId: string;
            edgeType: string;
            properties?: Record<string, never>;
        };
        KGQueryResult: {
            nodes: components["schemas"]["KGNode"][];
            edges: components["schemas"]["KGEdge"][];
            /** @description Query execution time in milliseconds */
            queryTime: number;
        };
        Insight: {
            id: string;
            category: string;
            title: string;
            description?: string;
            confidence: number;
            data?: Record<string, never>;
            /** Format: date-time */
            generatedAt: string;
        };
        PaginationInfo: {
            hasNext: boolean;
            hasPrev: boolean;
            nextCursor?: string;
            prevCursor?: string;
        };
        Error: {
            error: {
                code: string;
                message: string;
                /** Format: uuid */
                correlationId: string;
            };
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        IdempotencyKey: string;
        Cursor: string;
        Limit: number;
    };
    requestBodies: never;
    headers: {
        "X-RateLimit-Limit": number;
        "X-RateLimit-Remaining": number;
        "X-RateLimit-Reset": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listSignals: {
        parameters: {
            query?: {
                cursor?: components["parameters"]["Cursor"];
                limit?: components["parameters"]["Limit"];
                type?: string;
                from?: string;
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of signals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Signal"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
        };
    };
    ingestSignal: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSignalRequest"];
            };
        };
        responses: {
            /** @description Signal ingested */
            201: {
                headers: {
                    Location?: string;
                    "X-RateLimit-Limit": components["headers"]["X-RateLimit-Limit"];
                    "X-RateLimit-Remaining": components["headers"]["X-RateLimit-Remaining"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Signal"];
                };
            };
            400: components["responses"]["BadRequest"];
            409: components["responses"]["Conflict"];
        };
    };
    getIndicatorDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicator dashboard */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IndicatorDashboard"];
                };
            };
        };
    };
    getIndicator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                indicatorId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indicator details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Indicator"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    listKGNodes: {
        parameters: {
            query?: {
                cursor?: components["parameters"]["Cursor"];
                limit?: components["parameters"]["Limit"];
                nodeType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["KGNode"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
        };
    };
    createKGNode: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKGNodeRequest"];
            };
        };
        responses: {
            /** @description Node created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KGNode"];
                };
            };
        };
    };
    createKGEdge: {
        parameters: {
            query?: never;
            header?: {
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKGEdgeRequest"];
            };
        };
        responses: {
            /** @description Edge created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KGEdge"];
                };
            };
        };
    };
    queryKnowledgeGraph: {
        parameters: {
            query: {
                query: string;
                maxDepth?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Query results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KGQueryResult"];
                };
            };
        };
    };
    getInsights: {
        parameters: {
            query?: {
                cursor?: components["parameters"]["Cursor"];
                limit?: components["parameters"]["Limit"];
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of insights */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Insight"][];
                        pagination: components["schemas"]["PaginationInfo"];
                    };
                };
            };
        };
    };
    getInsight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                insightId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Insight details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Insight"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    onSignalReceived: {
        parameters: {
            query?: never;
            header: {
                "X-Lydian-Signature": string;
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "signal.received";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["Signal"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    onInsightGenerated: {
        parameters: {
            query?: never;
            header: {
                "X-Lydian-Signature": string;
                "X-Lydian-Timestamp": number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    eventId: string;
                    /** @enum {string} */
                    eventType: "insight.generated";
                    /** Format: date-time */
                    timestamp: string;
                    data: components["schemas"]["Insight"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
